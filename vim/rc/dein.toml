# basic {{{
[[plugins]]
repo     = 'KazuakiM/vim-qfstatusline'
hook_add = '''
  " :WatchdogsRun後にlightline.vimを更新
  let g:Qfstatusline#UpdateCmd = function('lightline#update')
'''

[[plugins]]
repo = 'Konfekt/FastFold'

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
if = '''! (has('macunix') && has('kaoriya') && isdirectory(expand('$VIM/plugins/vimproc')))'''
hook_post_update = 'call delphinus#init#vimproc#hook_post_update()'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''"{{{
let g:lightline = {
        \ 'colorscheme': 'solarized',
        \ 'mode_map': {'c': 'NORMAL'},
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ], [ 'fugitive' ], [ 'filepath' ], [ 'filename', 'qfstatusline' ] ],
        \   'right': [
        \     [ 'lineinfo' ],
        \     [ 'percent' ],
        \     [ 'char_code', 'fileformat', 'fileencoding', 'filetype' ],
        \   ],
        \ },
        \ 'component_function': {
        \   'modified': 'LightLineModified',
        \   'readonly': 'LightLineReadonly',
        \   'fugitive': 'LightLineFugitive',
        \   'filepath': 'LightLineFilePath',
        \   'filename': 'LightLineFilename',
        \   'fileformat': 'LightLineFileformat',
        \   'filetype': 'LightLineFiletype',
        \   'fileencoding': 'LightLineFileencoding',
        \   'mode': 'LightLineMode',
        \   'char_code': 'LightLineCharCode',
        \ },
        \ 'component_expand': {
        \   'qfstatusline': 'qfstatusline#Update',
        \ },
        \ 'component_type': {
        \   'qfstatusline': 'error',
        \ },
        \ 'separator': { 'left': '', 'right': '' },
        \ 'subseparator': { 'left': '', 'right': '' },
        \ }

function! LightLineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '' : &modifiable ? '' : '-'
endfunction

function! LightLineReadonly()
  return &ft == 'help' ? '' : &ft !~? 'vimfiler\|gundo' && &readonly ? '' : ''
endfunction

function! LightLineFilePath()
  return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' || &ft == 'unite' ? '' :
        \ winwidth(0) > 70 ?
        \   '' != expand('%') ? expand('%:h') : '' :
        \   '' != expand('%:t') ? expand('%:t') : '')
endfunction

function! LightLineFilename()
  return (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction

function! LightLineFugitive()
  if winwidth(0) < 100
    return ''
  endif
  try
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
      return fugitive#head()
    endif
  catch
  endtry
  return ''
endfunction

function! LightLineFileformat()
  return winwidth(0) > 100 ? &fileformat . ' ' . WebDevIconsGetFileFormatSymbol() : ''
endfunction

function! LightLineFiletype()
  return winwidth(0) > 100 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction

function! LightLineFileencoding()
  return winwidth(0) > 100 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! LightLineMode()
  let l:fname = expand('%:t')
  return fname =~# 'unite' ? 'Unite' :
        \ fname =~# 'vimfiler' ? 'VimFilter' :
        \ fname =~# '__Gundo__' ? 'Gundo' :
        \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! LightLineCharCode()
  if winwidth(0) <= 100
    return ''
  endif
  redir => l:tmp | silent! ascii | redir END
  let m = matchlist(l:tmp, '<\(.\+\)>\s*\(\d\+\)')
  return len(m) > 0 ? printf('%s %X', m[1], m[2]) : ''
endfunction
"}}}'''

[[plugins]]
repo     = 'kana/vim-submode'
hook_add = '''"{{{
  call submode#enter_with('DWM_size', 'n', '', '<C-w>>', ':call DWM_GrowMaster()<CR>')
  call submode#enter_with('DWM_size', 'n', '', '<C-w><', ':call DWM_ShrinkMaster()<CR>')
  call submode#map('DWM_size', 'n', '', '>', ':call DWM_GrowMaster()<CR>')
  call submode#map('DWM_size', 'n', '', '<', ':call DWM_ShrinkMaster()<CR>')
"}}}'''

[[plugins]]
repo     = 'pseewald/vim-anyfold'
hook_add = '''"{{{
  let g:anyfold_activate=1
}}}"'''

[[plugins]]
repo     = 'ryanoasis/vim-devicons'
hook_add = '''"{{{
  let g:webdevicons_enable_unite = 0
  let g:webdevicons_enable_nerdtree = 0
  let g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol = ''
  let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {
        \ 'fcgi':     '',
        \ 'perl':     '',
        \ 'sqlite':   '',
        \ 'tt':       '',
        \ 'txt':      '',
        \ }
"}}}'''

[[plugins]]
repo     = 'tmux-plugins/vim-tmux-focus-events'
if       = '''exists('$TMUX') || ! has('gui_running')'''
hook_add = 'set autoread'

[[plugins]]
repo     = 'tpope/vim-fugitive'
hook_add = '''"{{{
  let g:fugitive_git_executable = expand('HOME=$H git my-alias')
  nnoremap git :<c-u>Git
  nnoremap g<space> :<c-u>Git 
  nnoremap d< :diffget //2<CR>
  nnoremap d> :diffget //3<CR>
"}}}'''

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
# }}}

# colorscheme {{{
[[plugins]]
repo     = 'delphinus/vim-colors-solarized'
rev      = 'for-hydrozen-fork'
hook_add = 'let g:solarized_menu = 0'

[[plugins]]
repo     = 'lifepillar/vim-solarized8'
on_if    = '''has('termguicolors')'''
hook_add = '''
  let g:solarized_diffmode = 'normal'
  let g:solarized_visibility = 'normal'
  if $TERM =~# 'italic'
    let g:solarized_term_italics = 1
  endif

  nnoremap  <leader>B :<c-u>exe "colors" (g:colors_name =~# "dark"
      \ ? substitute(g:colors_name, 'dark', 'light', '')
      \ : substitute(g:colors_name, 'light', 'dark', '')
      \ )<cr>
'''
# }}}

# syntax {{{
[[plugins]]
repo = 'ChrisYip/Better-CSS-Syntax-for-Vim'

[[plugins]]
repo = 'Glench/Vim-Jinja2-Syntax'

[[plugins]]
repo = 'aklt/plantuml-syntax'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'leafgarland/typescript-vim'

[[plugins]]
repo     = 'delphinus/vim-markdown'
rev      = 'merged-inline_and_code_fixes-conceal'
hook_add = '''"{{{
  augroup SetMarkdown
    autocmd!
    autocmd FileType markdown,howm_memo.markdown setlocal conceallevel=2
    autocmd FileType markdown,howm_memo.markdown hi markdownH1 cterm=bold,italic gui=bold,italic
    autocmd FileType markdown,howm_memo.markdown hi markdownH2 cterm=bold gui=bold
    autocmd FileType markdown,howm_memo.markdown hi markdownH3 cterm=italic gui=italic
  augroup END

  let g:markdown_fenced_languages = [
        \ 'coffee',
        \ 'cpp',
        \ 'css',
        \ 'diff',
        \ 'erlang',
        \ 'go',
        \ 'haskell',
        \ 'html',
        \ 'java',
        \ 'javascript',
        \ 'json',
        \ 'lua',
        \ 'ocaml',
        \ 'perl',
        \ 'plantuml',
        \ 'python',
        \ 'ruby',
        \ 'sh',
        \ 'sql',
        \ 'toml',
        \ 'typescript',
        \ 'vim',
        \ 'xml',
        \ ]
  " set conceal feature: default value '#*dlaibBces'
  let g:markdown_conceal = '*dlaibBes'
"}}}'''

[[plugins]]
repo = 'digitaltoad/vim-jade'

[[plugins]]
repo = 'kchmck/vim-coffee-script'

[[plugins]]
repo     = 'elzr/vim-json'
if       = '''! has('kaoriya')'''
hook_add = 'let g:vim_json_syntax_conceal = 0'

[[plugins]]
repo = 'motemen/xslate-vim'

[[plugins]]
repo = 'moznion/vim-cpanfile'

[[plugins]]
repo = 'othree/html5.vim'

[[plugins]]
repo = 'othree/javascript-libraries-syntax.vim'

[[plugins]]
repo = 'othree/yajs.vim'

[[plugins]]
repo = 'vim-perl/vim-perl'
# }}}

# filetype {{{
[[plugins]]
repo = 'ap/vim-css-color'

[[plugins]]
repo = 'c9s/perlomni.vim'

[[plugins]]
repo = 'delphinus/vim-rails'
rev  = 'feature/recognize-ridgepole'

[[plugins]]
repo = 'jason0x43/vim-js-indent'

[[plugins]]
repo = 'taskwarrior/task'
rtp  = 'scripts/vim'

[[plugins]]
repo  = 'ternjs/tern_for_vim'
build = 'npm install'

[[plugins]]
repo = 'tmux-plugins/vim-tmux'
# }}}

# for unite {{{
[[plugins]]
repo      = 'Shougo/unite-outline'

[[plugins]]
repo      = 'Kocha/vim-unite-tig'

[[plugins]]
repo      = 'basyura/unite-rails'

[[plugins]]
repo      = 'lambdalisue/vim-gista-unite'
hook_post_source = '''
  call unite#custom#default_action('gista', 'narrow')
'''

[[plugins]]
repo      = 'pekepeke/vim-unite-z'

[[plugins]]
repo      = 'sorah/unite-bundler'

[[plugins]]
repo      = 'tsukkee/unite-tag'

[[plugins]]
repo     = 'ujihisa/neco-look'
hook_add = '''"{{{
  let g:neocomplete#text_mode_filetypes = {
        \ 'rst': 1,
        \ 'markdown': 1,
        \ 'howm_memo': 1,
        \ 'howm_memo.markdown': 1,
        \ 'gitrebase': 1,
        \ 'gitcommit': 1,
        \ 'vcs-commit': 1,
        \ 'hybrid': 1,
        \ 'text': 1,
        \ 'help': 1,
        \ 'tex': 1,
        \ }
"}}}'''
# }}}

# vim-script {{{
[[plugins]]
repo = 'HiColors'

[[plugins]]
repo = 'applescript.vim'

[[plugins]]
repo = 'ingo-library'

[[plugins]]
repo = 'nginx.vim'
# }}}

# dependencies {{{
[[plugins]]
repo = 'osyo-manga/shabadou.vim'

[[plugins]]
repo = 'kana/vim-textobj-user'
# }}}

# vim:se fdm=marker:
