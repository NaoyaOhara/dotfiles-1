# Shougoware {{{
[[plugins]]
repo        = 'Shougo/echodoc.vim'
hook_source = 'let g:echodoc_enable_at_startup = 1'

[[plugins]]
repo      = 'Shougo/neoinclude.vim'
depends   = ['neoinclude.vim']
on_source = ['unite.vim']

[[plugins]]
repo        = 'Shougo/neocomplete.vim'
depends     = 'echodoc.vim'
on_i        = 1
hook_add    = '''"{{{
  " Enable omni completion.
  augroup NeocompleteFileType
    autocmd!
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
  augroup END
"}}}'''
hook_source = 'call delphinus#init#neocomplete#hook_source()'

[[plugins]]
repo      = 'Shougo/neomru.vim'
on_source = ['unite.vim']

[[plugins]]
repo      = 'Shougo/tabpagebuffer.vim'
on_source = ['unite.vim', 'vimfiler', 'vimshell']

[[plugins]]
repo     = 'Shougo/unite.vim'
hook_add = '''"{{{
  noremap za :Unite file_rec/async<CR>
  noremap zd :Unite dwm<CR>
  noremap zD :Unite dein/log<CR>
  noremap zf :Unite qfixhowm/new qfixhowm<CR>
  noremap zF :Unite qfixhowm/new qfixhowm:nocache<CR>
  noremap zg :Unite file_rec/git<CR>
  noremap zG :Unite grep:.:--hidden:
  "noremap <c-]> :UniteWithCursorWord -immediately tag/include<CR>
  noremap zi :Unite tig<CR>
  noremap zI :Unite gista<CR>
  noremap zl :Unite outline<CR>
  noremap zn :UniteWithBufferDir -buffer-name=files file file/new<CR>
  noremap zu :Unite bundler<CR>
  noremap zU :UniteResume<CR>
  noremap zT :Unite tab<CR>
  noremap zN :Unite -buffer-name=files file file/new<CR>
  noremap zp :Unite dwm buffer_tab file_mru:long<CR>
  noremap zP :Unite yankround<CR>
  noremap zh :Unite ghq<CR>
  noremap ZB :Unite rails/bundle<CR>
  noremap ZC :Unite rails/controller<CR>
  noremap ZD :Unite rails/db<CR>
  noremap ZG :Unite rails/bundled_gem<CR>
  noremap ZH :Unite rails/helper<CR>
  noremap ZJ :Unite rails/javascript<CR>
  noremap ZL :Unite rails/lib<CR>
  noremap ZM :Unite rails/model<CR>
  noremap ZO :Unite rails/command<CR>
  noremap ZR :Unite rails/route<CR>
  noremap ZS :Unite rails/spec<CR>
  noremap ZT :Unite tsproject<CR>
  noremap ZV :Unite rails/view<CR>
  noremap Zc :Unite rails/config<CR>
  noremap Zj :Unite rails/json_schema<CR>
  noremap Zl :Unite rails/log<CR>
  noremap Zm :Unite rails/mailer<CR>
  noremap Zr :Unite rails/root<CR>
  noremap Zs :Unite rails/stylesheet<CR>
"}}}'''
hook_source = 'call delphinus#init#unite#hook_source()'

[[plugins]]
repo      = 'Shougo/vimfiler'
on_source = ['unite.vim']
on_cmd    = [
  'VimFiler',
  'VimFilerExplorer',
  'Edit',
  'Read',
  'Source',
  'Write',
]
hook_add         = 'nnoremap `f :VimFilerBufferDir<CR>'
hook_source      = 'call delphinus#init#vimfiler#hook_source()'
hook_post_source = 'call delphinus#init#vimfiler#hook_post_source()'

[[plugins]]
repo   = 'Shougo/vimshell'
on_cmd = [
  'VimShell',
  'VimShellExecute',
  'VimShellInteractive',
  'VimShellTerminal',
  'VimShellPop',
]
hook_add = '''
  nnoremap `vv :<C-U>VimShell<CR>
  nnoremap `vc :<C-U>VimShellCreate<CR>
'''
hook_source = 'call delphinus#init#vimshell#hook_source()'

[[plugins]]
repo   = 'Shougo/vinarise.vim'
on_cmd = ['Vinarise']
# }}}

# for unite {{{
[[plugins]]
repo      = 'delphinus35/unite-ghq'
on_source = ['unite.vim']
hook_source = '''
  if exists('$H')
    let g:unite_ghq_executable = 'ghq.sh'
  endif
'''

[[plugins]]
repo        = 'fuenor/qfixhowm'
on_map      = ['g,m', 'g,c', 'g,s', 'g,q']
on_source   = ['unite.vim']
hook_source = 'call delphinus#init#qfixhowm#hook_source()'

[[plugins]]
repo      = 'kannokanno/unite-dwm'
on_source = ['unite.vim']

[[plugins]]
repo      = 'osyo-manga/unite-qfixhowm'
depends   = ['qfixhowm']
on_source = ['unite.vim']

[[plugins]]
repo      = 'spolu/dwm.vim'
on_map    = ['<Plug>DWM']
on_source = ['unite.vim']
hook_add  = '''"{{{
  let g:delphinus#dwm#min_master_pane_width = get(g:, 'delphinus#dwm#min_master_pane_width', 86)

  let s:toggle_set_master_pane_width = 0

  nnoremap <C-J> <C-W>w
  nnoremap <C-K> <C-W>W
  nmap <C-T> <Plug>DWMRotateClockwise
  nmap <C-Q> <Plug>DWMRotateCounterclockwise
  nmap <C-N> <Plug>DWMNew
  nmap <C-C> <Plug>DWMClose
  nmap <C-S> <Plug>DWMFocus
  nmap <C-Space> <Plug>DWMFocus
  nmap <C-L> <Plug>DWMGrowMaster
  nmap <C-H> <Plug>DWMShrinkMaster
  nmap <BS>  <Plug>DWMShrinkMaster

  command! DWMSetMasterPaneWidth call delphinus#dwm#set_master_pane_width()
  command! DWMDisable call delphinus#dwm#disable()
  command! DWMEnable call delphinus#dwm#enable()
"}}}'''

[[plugins]]
repo        = 'thinca/vim-ref'
on_cmd      = ['Ref']
on_source   = ['unite.vim']
hook_add    = '''"{{{
  noremap `rm :Unite ref/man<CR>
  noremap `rp :Unite ref/perldoc<CR>
  noremap `rr :Unite ref/refe<CR>
"}}}'''
hook_source = 'call delphinus#init#ref#hook_source()'
# }}}

# on_cmd {{{
[[plugins]]
repo     = 'airblade/vim-rooter'
on_cmd   = ['Rooter']
hook_add = '''"{{{
  let g:rooter_use_lcd = 1
  let g:rooter_silent_chdir = 1
  autocmd BufEnter * Rooter
"}}}'''

[[plugins]]
repo   = 'fuenor/JpFormat.vim'
on_cmd = ['JpFormatAll', 'JpJoinAll']
on_ft  = ['howm_memo']

[[plugins]]
repo   = 'gregsexton/VimCalc'
on_cmd = ['Calc']

[[plugins]]
repo   = 'kannokanno/previm'
on_cmd = ['PrevimOpen']

[[plugins]]
repo     = 'lambdalisue/vim-gista'
on_cmd   = ['Gista']
on_func  = ['gista#']
hook_add = '''
  let g:gista#command#list#enable_default_mappings = 0
  nnoremap gl :<c-u>Gista list<CR>
  nnoremap gL :<c-u>Gista list 
'''
hook_post_source = 'call delphinus#init#gista#hook_post_source()'

[[plugins]]
repo   = 'powerman/vim-plugin-AnsiEsc'
on_cmd = ['AnsiEsc']

[[plugins]]
repo   = 'rizzatti/dash.vim'
on_cmd = ['Dash']
gui    = 1

[[plugins]]
repo   = 'sjl/gundo.vim'
on_cmd = ['GundoToggle']

[[plugins]]
repo        = 'thinca/vim-fontzoom'
on_cmd      = ['Fontzoom']
on_map      = ['<Plug>(fontzoom-']
if          = '''has('gui')'''
hook_add    = '''"{{{
  nmap <unique> <silent> + <Plug>(fontzoom-larger)
  nmap <unique> <silent> - <Plug>(fontzoom-smaller)
  nmap <unique> <silent> <C-ScrollWheelUp> <Plug>(fontzoom-larger)
  nmap <unique> <silent> <C-ScrollWheelDown> <Plug>(fontzoom-smaller)
"}}}'''
hook_source = '''"{{{
  let g:fontzoom_no_default_key_mappings=1
"}}}'''

[[plugins]]
repo      = 'thinca/vim-prettyprint'
on_cmd    = ['PP', 'PrettyPrint']
on_source = ['capture.vim']

[[plugins]]
repo   = 'tyru/capture.vim'
on_cmd = ['Capture']

[[plugins]]
repo     = 'tyru/open-browser.vim'
on_cmd   = ['OpenBrowser', 'OpenBrowserSearch']
on_func  = ['openbrowser#open']
on_map   = ['<Plug>(openbrowser-']
hook_add = '''
  nmap g<CR> <Plug>(openbrowser-smart-search)
  vmap g<CR> <Plug>(openbrowser-smart-search)
'''
# }}}

# on_ft {{{
[[plugins]]
repo        = 'Quramy/tsuquyomi'
on_ft       = ['typescript']
hook_source = 'call delphinus#init#tsuquyomi#hook_source()'

[[plugins]]
repo  = 'catalinciurea/perl-nextmethod'
on_ft = ['perl']

[[plugins]]
repo             = 'csv.vim'
on_ft            = ['csv']
hook_source = '''
  let g:csv_delim = ','
'''
hook_post_source = 'call delphinus#init#csv#hook_post_source()'

[[plugins]]
repo    = 'delphinus35/neocomplete-json-schema'
depends = ['neocomplete.vim']
on_ft   = ['json']
on_i    = 1

[[plugins]]
repo  = 'dsawardekar/wordpress.vim'
on_ft = ['php']

[[plugins]]
repo  = 'fatih/vim-go'
on_ft = ['go']

[[plugins]]
repo  = 'msanders/cocoa.vim'
on_ft = ['objc']

[[plugins]]
repo    = 'rhysd/vim-textobj-ruby'
depends = ['vim-textobj-user']
on_ft   = ['ruby']

[[plugins]]
repo = 'tpope/vim-endwise'
on_ft = [
    'lua', 'elixir', 'ruby', 'crystal', 'sh', 'zsh', 'vb', 'vbnet',
    'aspvbs', 'vim', 'c', 'cpp', 'xdefaults', 'objc', 'matlab',
  ]
# }}}

# on_map {{{
[[plugins]]
repo     = 'LeafCage/yankround.vim'
on_map   = ['<Plug>(yankround-']
hook_add = '''"{{{
  nmap p <Plug>(yankround-p)
  xmap p <Plug>(yankround-p)
  nmap P <Plug>(yankround-P)
  nmap gp <Plug>(yankround-gp)
  xmap gp <Plug>(yankround-gp)
  nmap gP <Plug>(yankround-gP)
  nmap <c-p> <Plug>(yankround-prev)
  nmap <expr><c-n> yankround#is_active() ? "\<Plug>(yankround-next)" : "\<Plug>DWMNew"
"}}}'''

[[plugins]]
repo     = 'chikatoike/concealedyank.vim'
on_map   = ['<Plug>(operator-concealedyank)']
hook_add = 'xmap Y <Plug>(operator-concealedyank)'

[[plugins]]
repo     = 'delphinus35/vim-lycia'
on_map   = ['<Plug>(lycia']
hook_add = '''"{{{
  nmap go <Plug>(lycia)
  vmap go <Plug>(lycia)
  nmap gb <Plug>(lycia-current-branch)
  vmap gb <Plug>(lycia-current-branch)
  nmap gc <Plug>(lycia-current-commit)
  vmap gc <Plug>(lycia-current-commit)
  nmap g<C-t> <Plug>(lycia-top-page)
  nmap g<C-y> <Plug>(lycia-top-page-current-branch)
  let g:lycia_map=0
"}}}'''

[[plugins]]
repo        = 'junegunn/vim-easy-align'
on_map      = ['<Plug>(EasyAlign)', '<Plug>(LiveEasyAlign)']
hook_add    = '''"{{{
  vmap <Enter>           <Plug>(EasyAlign)
  nmap <Leader>a         <Plug>(EasyAlign)
  vmap <Leader><Enter>   <Plug>(LiveEasyAlign)
  nmap <Leader><Leader>a <Plug>(LiveEasyAlign)
"}}}'''
hook_source = 'call delphinus#init#easyalign#hook_source()'

[[plugins]]
repo     = 't9md/vim-quickhl'
on_map   = ['<Plug>(quickhl-', '<Plug>(operator-quickhl-']
hook_add = '''"{{{
  nmap <Space>m <Plug>(quickhl-manual-this)
  xmap <Space>m <Plug>(quickhl-manual-this)
  nmap <Space>t <Plug>(quickhl-manual-toggle)
  xmap <Space>t <Plug>(quickhl-manual-toggle)
  nmap <Space>M <Plug>(quickhl-manual-reset)
  xmap <Space>M <Plug>(quickhl-manual-reset)
  nmap <Space>j <Plug>(quickhl-cword-toggle)
  nmap <Space>] <Plug>(quickhl-tag-toggle)
  map  <Space>H <Plug>(operator-quickhl-manual-this-motion)
"}}}'''

[[plugins]]
repo     = 't9md/vim-choosewin'
on_map   = ['<Plug>(choosewin)']
hook_add = '''
  nmap \ <Plug>(choosewin)
  let g:choosewin_statusline_replace=0
  let g:choosewin_overlay_enable=1
'''

[[plugins]]
repo        = 'easymotion/vim-easymotion'
on_map      = ['<Plug>(easymotion-']
hook_add    = '''"{{{
  map ' <Plug>(easymotion-prefix)
  nmap s <Plug>(easymotion-overwin-f)
  xmap s <Plug>(easymotion-s)
  omap s <Plug>(easymotion-s)
  nmap S <Plug>(easymotion-overwin-f2)
  xmap S <Plug>(easymotion-s2)
  omap S <Plug>(easymotion-s2)
  nmap 'f <Plug>(easymotion-fl)
  xmap 'f <Plug>(easymotion-fl)
  omap 'f <Plug>(easymotion-fl)
  nmap 'F <Plug>(easymotion-Fl)
  xmap 'F <Plug>(easymotion-Fl)
  omap 'F <Plug>(easymotion-Fl)
  map  '/ <Plug>(easymotion-sn)
  omap '/ <Plug>(easymotion-tn)
  map  'n <Plug>(easymotion-next)
  map  'N <Plug>(easymotion-prev)
  map  'L <Plug>(easymotion-bd-jk)
  nmap 'L <Plug>(easymotion-overwin-line)
"}}}'''
hook_source = 'call delphinus#init#easymotion#hook_source()'

[[plugins]]
repo    = 'LineJuggler'
depends = [
  'vim-repeat',
  'ingo-library',
  'visualrepeat',
]
on_map   = ['<Plug>(LineJuggler']
hook_add = '''"{{{
  xmap [d       <Plug>(LineJugglerDupOverUp)
  nmap [d       <Plug>(LineJugglerDupOverUp)
  xmap [E       <Plug>(LineJugglerSwapUp)
  nmap [E       <Plug>(LineJugglerSwapUp)
  xmap [e       <Plug>(LineJugglerMoveUp)
  nmap [e       <Plug>(LineJugglerMoveUp)
  xmap [<Space> <Plug>(LineJugglerBlankUp)
  nmap [<Space> <Plug>(LineJugglerBlankUp)
  xmap ]d       <Plug>(LineJugglerDupOverDown)
  nmap ]d       <Plug>(LineJugglerDupOverDown)
  xmap ]E       <Plug>(LineJugglerSwapDown)
  nmap ]E       <Plug>(LineJugglerSwapDown)
  xmap ]e       <Plug>(LineJugglerMoveDown)
  nmap ]e       <Plug>(LineJugglerMoveDown)
  xmap ]<Space> <Plug>(LineJugglerBlankDown)
  nmap ]<Space> <Plug>(LineJugglerBlankDown)
"}}}'''
# }}}

# on_event {{{
[[plugins]]
repo     = 'delphinus35/vim-emacscommandline'
on_event = ['FocusLost', 'CursorHold']

[[plugins]]
repo     = 'delphinus35/vim-unimpaired'
on_event = ['FocusLost', 'CursorHold']

[[plugins]]
repo     = 'itchyny/vim-cursorword'
on_event = ['FocusLost', 'CursorHold']

[[plugins]]
repo             = 'itchyny/vim-parenmatch'
on_event         = ['FocusLost', 'CursorHold']
hook_add         = 'let g:loaded_matchparen = 1'
hook_post_source = 'call parenmatch#highlight()'

[[plugins]]
repo        = 'sgur/vim-lazygutter'
on_event    = ['FocusLost', 'CursorHold']
hook_source = 'call delphinus#init#lazygutter#hook_source()'

[[plugins]]
repo     = 'thinca/vim-visualstar'
on_event = ['FocusLost', 'CursorHold']
# }}}

# watchdogs {{{
[[plugins]]
repo    = 'osyo-manga/vim-watchdogs'
depends = [
  'vim-hier',
  'quickfixstatus',
  'shabadou.vim',
  'vim-quickrun',
]
on_event         = ['FocusLost', 'CursorHold']
hook_source      = 'call delphinus#init#watchdogs#hook_source()'
hook_post_source = 'call delphinus#init#watchdogs#hook_post_source()'

[[plugins]]
repo = 'cohama/vim-hier'

[[plugins]]
repo     = 'thinca/vim-quickrun'
on_cmd   = ['QuickRun']
hook_add = '''"{{{
  let g:quickrun_no_default_key_mappings=1

  for [s:key, s:com] in items({
        \ 'x': '>message',
        \ 's': '-runner shell',
        \ 'w': '-runner vimproc >buffer',
        \ 'q': '-runner vimproc >>buffer',
        \ })
    execute 'nnoremap <silent>' '`q' . s:key ':QuickRun' s:com '-mode n<CR>'
    execute 'vnoremap <silent>' '`q' . s:key ':QuickRun' s:com '-mode v<CR>'
  endfor
"}}}'''

[[plugins]]
repo = 'dannyob/quickfixstatus'
# }}}

# others {{{
[[plugins]]
repo     = 'dhruvasagar/vim-table-mode'
on_func  = ['tablemode#Toggle']
hook_add = '''
  nnoremap `tm :call tablemode#Toggle()<CR>
  let g:table_mode_corner='|'
'''

[[plugins]]
repo    = 'haya14busa/incsearch.vim'
depends = [
    'vim-easymotion'
    'incsearch-easymotion.vim'
    'incsearch-fuzzy.vim'
  ]
on_func  = ['incsearch#go']
hook_add = 'noremap <silent><expr> <Space>/ incsearch#go(delphinus#incsearch#config_easyfuzzymotion())'

[[plugins]]
repo = 'haya14busa/incsearch-easymotion.vim'

[[plugins]]
repo = 'haya14busa/incsearch-fuzzy.vim'

[[plugins]]
repo = 'vim-jp/vital.vim'
on_func = ['vital#of']

[[plugins]]
repo = 'visualrepeat'
# }}}

# vim:se fdm=marker:
