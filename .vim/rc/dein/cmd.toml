[[plugins]]
repo       = 'Shougo/deol.nvim'
on_command = ['Deol']
hook_add   = '''"{{{
  let g:deol#enable_dir_changed = 0
  nnoremap <C-\><C-n> :<C-u>Deol -split<CR>
  nnoremap <BS><C-n> :<C-u>Deol -split<CR>
  tnoremap <BS><C-n> <C-\><C-n>
  function! s:new_deol() abort
    if exists('t:deol')
      tabnew
    endif
    Deol
  endfunction
  " map for terminal + dwm.vim
  augroup InsertIfTerminal
    autocmd!
    if has('nvim')
      autocmd WinEnter * if &buftype ==# 'terminal' | startinsert | endif
    else
      autocmd WinEnter * if &buftype ==# 'terminal' | normal i | endif
    endif
  augroup END
  tmap À     <C-\><C-n><C-@>
  tmap <A-@> <C-\><C-n><C-@>
  tmap ã     <C-\><C-n><C-c>
  tmap <A-c> <C-\><C-n><C-c>
  tmap ê     <C-\><C-n><C-j>
  tmap <A-j> <C-\><C-n><C-j>
  tmap ë     <C-\><C-n><C-k>
  tmap <A-k> <C-\><C-n><C-k>
  tmap ï     <C-\><C-n><C-w>oi
  tmap <A-o> <C-\><C-n><C-w>oi
  tmap î     <C-\><C-n>
  tmap <A-n> <C-\><C-n>
  tmap ñ     <C-\><C-n><C-q>
  tmap <A-q> <C-\><C-n><C-q>
  tmap ó     <C-\><C-n><C-s>
  tmap <A-s> <C-\><C-n><C-s>
  tmap       <C-\><C-n><C-@>
  tmap <A-Space> <C-\><C-n><C-@>
  tmap »     <C-\><C-n>:
  tmap <A-;> <C-\><C-n>:
  tmap ô     <C-\><C-n>gt
  tmap <A-t> <C-\><C-n>gt
  tnoremap <expr> ò '<C-\><C-n>"'.nr2char(getchar()).'pi'
  tnoremap <expr> <A-r> '<C-\><C-n>"'.nr2char(getchar()).'pi'
  nmap À     <C-@>
  nmap <A-@> <C-@>
  nmap ã     <C-c>
  nmap <A-c> <C-c>
  nmap ê     <C-j>
  nmap <A-j> <C-j>
  nmap ë     <C-k>
  nmap <A-k> <C-k>
  nmap ï     <C-w>o
  nmap <A-o> <C-w>o
  nmap î     :<C-u>call <SID>new_deol()<CR>
  nmap <A-n> :<C-u>call <SID>new_deol()<CR>
  nmap ñ     <C-q>
  nmap <A-q> <C-q>
  nmap ó     <C-s>
  nmap <A-s> <C-s>
  nmap       <C-@>
  nmap <A-Space> <C-@>
  nmap »     :
  nmap <A-;> :
  nmap ô     gt
  nmap <A-t> gt
"}}}'''

[[plugins]]
repo   = 'fuenor/JpFormat.vim'
on_cmd = ['JpFormatAll', 'JpJoinAll']

[[plugins]]
repo     = 'lambdalisue/vim-gista'
on_cmd   = ['Gista']
on_func  = ['gista#']
hook_add = '''
  let g:gista#command#list#enable_default_mappings = 0
  nnoremap gl :<c-u>Gista list<CR>
  nnoremap gL :<c-u>Gista list 
'''
hook_post_source = 'call delphinus#init#gista#hook_post_source()'

[[plugins]]
repo     = 'lambdalisue/lista.nvim'
depends  = ['vim-rplugin']
on_cmd   = ['Lista', 'ListaCursorWord']
hook_source = '''
  let g:lista#custom_mappings = [
    \ ['<C-D>', '<Del>'],
    \ ['<C-A>', '<Home>'],
    \ ['<C-E>', '<End>'],
    \ ['<C-F>', '<Right>'],
    \ ['<C-B>', '<Left>'],
    \ ['<C-K>', '<lista:select_previous_candidate>'],
    \ ['<C-J>', '<lista:select_next_candidate>'],
    \ ['<C-C>', '<Esc>'],
    \]
'''
hook_add = '''
  nnoremap # :<C-u>Lista<CR>
  nnoremap g# :<C-u>ListaCursorWord<CR>
'''

[[plugins]]
repo   = 'powerman/vim-plugin-AnsiEsc'
on_cmd = ['AnsiEsc']

[[plugins]]
#repo   = 'rhysd/ghpr-blame.vim'
repo   = 'delphinus/ghpr-blame.vim'
on_cmd = ['GHPRBlame']
hook_source = '''
  source ~/.init-ghprblame.vim
  let g:ghpr_show_pr_mapping = 'ð'
  let g:ghpr_show_pr_in_message = 1
'''

[[plugins]]
repo   = 'sjl/gundo.vim'
on_cmd = ['GundoToggle']

[[plugins]]
repo        = 'thinca/vim-fontzoom'
on_cmd      = ['Fontzoom']
on_map      = ['<Plug>(fontzoom-']
if          = '''has('gui')'''
hook_add    = '''"{{{
  nmap <unique> <silent> + <Plug>(fontzoom-larger)
  nmap <unique> <silent> - <Plug>(fontzoom-smaller)
  nmap <unique> <silent> <C-ScrollWheelUp> <Plug>(fontzoom-larger)
  nmap <unique> <silent> <C-ScrollWheelDown> <Plug>(fontzoom-smaller)
"}}}'''
hook_source = '''"{{{
  let g:fontzoom_no_default_key_mappings=1
"}}}'''

[[plugins]]
repo      = 'thinca/vim-prettyprint'
on_cmd    = ['PP', 'PrettyPrint']
on_source = ['capture.vim']

[[plugins]]
repo   = 'tyru/capture.vim'
on_cmd = ['Capture']

[[plugins]]
repo     = 'tyru/open-browser.vim'
on_cmd   = ['OpenBrowser', 'OpenBrowserSearch']
on_func  = ['openbrowser#open']
on_map   = ['<Plug>(openbrowser-']
hook_add = '''
  nmap g<CR> <Plug>(openbrowser-smart-search)
  vmap g<CR> <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo   = 'tweekmonster/startuptime.vim'
on_cmd = ['StartupTime']

[[plugins]]
repo   = 'vifm/vifm.vim'
on_cmd = ['EditVifm', 'VsplitVifm', 'SplitVifm', 'DiffVifm', 'TabVifm']
on_ft  = ['vifm']

# vim:se fdm=marker:
