[[plugins]]
repo        = 'Shougo/deoplete.nvim'
on_event    = ['InsertEnter']
depends     = ['nvim-yarp', 'vim-hug-neovim-rpc']
hook_source = ''' "{{{
  let g:deoplete#enable_at_startup = 1
  inoremap <silent> <expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ deoplete#manual_complete()
  inoremap <silent> <expr> <S-TAB>
        \ pumvisible() ? "\<C-p>" :
        \ <SID>check_back_space() ? "\<S-TAB>" :
        \ deoplete#manual_complete()
  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1] =~# '\s'
  endfunction
"}}} '''
hook_post_source = ''' "{{{
  call deoplete#custom#source('_', 'converters', [
        \ 'converter_auto_paren',
        \ 'converter_remove_overlap',
        \ 'converter_truncate_abbr',
        \ 'converter_truncate_menu',
        \ ])
  call deoplete#custom#source('ale', 'dup', v:true)
  call deoplete#custom#source('look', 'rank', 0)
  call deoplete#custom#option({
        \ 'candidate_marks': ['A', 'S', 'D', 'F', 'G'],
        \ 'ignore_sources': {
        \   'denite-filter': ['look'],
        \ },
        \ 'omni_patterns': {
        \   'go': '[^. *\t]\.\w*',
        \ }})
  inoremap <expr> A pumvisible() ? deoplete#insert_candidate(0) : 'A'
  inoremap <expr> S pumvisible() ? deoplete#insert_candidate(1) : 'S'
  inoremap <expr> D pumvisible() ? deoplete#insert_candidate(2) : 'D'
  inoremap <expr> F pumvisible() ? deoplete#insert_candidate(3) : 'F'
  inoremap <expr> G pumvisible() ? deoplete#insert_candidate(4) : 'G'
  call deoplete#initialize()
"}}} '''
hook_post_update = '!pip3 install -U --user neovim'

[[plugins]]
repo      = 'Shougo/neoinclude.vim'
on_source = ['deoplete.nvim']

[[plugins]]
repo      = 'Shougo/neopairs.vim'
on_source = ['deoplete.nvim']

[[plugins]]
repo      = 'Shougo/echodoc.vim'
on_source = ['deoplete.nvim']
hook_source = ''' "{{{
  let g:echodoc#enable_at_startup = 1
  let g:echodoc#type = 'virtual'
"}}} '''

[[plugins]]
repo  = 'Shougo/neco-vim'
on_ft = ['vim']

[[plugins]]
repo    = 'carlitux/deoplete-ternjs'
on_ft   = ['javascript']
hook_post_update = '''
  !npm install -g tern
'''
hook_source = '''
  let g:deoplete#sources#ternjs#types = 1
  let g:deoplete#sources#ternjs#depths = 1
  let g:deoplete#sources#ternjs#docs = 1
'''

[[plugins]]
repo      = 'ncm2/float-preview.nvim'
if        = 'has("nvim")'
on_source = ['deoplete.nvim']
hook_add = ''' "{{{
  let g:float_preview#docked = 0
  let g:float_preview#winhl = 'Normal:FloatPreview,NonText:FloatPreviewTransparent,EndOfBuffer:FloatPreviewTransparent'
  function! s:float_preview_win_open() abort
    call nvim_win_set_option(g:float_preview#win, 'colorcolumn', '')
    call nvim_win_set_option(g:float_preview#win, 'list', v:false)
  endfunction
  autocmd User FloatPreviewWinOpen call s:float_preview_win_open()
"}}} '''

[[plugins]]
repo      = 'w0rp/ale'
on_source = ['deoplete.nvim']
on_cmd    = ['ALE']
on_map    = ['<Plug>(ale-']
on_ft     = [
  'go',
  'javascript',
  'json',
  'perl',
  'python',
  'ruby',
  'typescript',
  'vim',
  'vue',
]
#repo     = 'delphinus/ale'
#rev      = 'feature/detect-note-in-mypy'
hook_add = '''
  let g:ale_fix_on_save = 1
  let g:ale_echo_msg_format = '%severity%  %linter% - %s'
  "let g:ale_echo_msg_error_str = nr2char(0xf42d) . ' ' " ' '
  "let g:ale_echo_msg_warning_str = nr2char(0xf426) . ' ' " ' '
  "let g:ale_sign_error = nr2char(0xf42d) . ' ' " ' '
  "let g:ale_echo_msg_info_str = nr2char(0xf05a) . ' ' " ' '
  "let g:ale_sign_warning = nr2char(0xf426) . ' ' " ' '
  "let g:ale_statusline_format = [nr2char(0xf42d) . '  %d', nr2char(0xf426) . '  %d', nr2char(0xf4e6) . '  '] " '   '
  let g:ale_echo_msg_error_str = nr2char(0x25b8) " '▸'
  let g:ale_echo_msg_warning_str = nr2char(0x25b9) " '▹'
  let g:ale_echo_msg_info_str = nr2char(0x25b4) " '▴'
  let g:ale_sign_error =  nr2char(0x25b8) " '▸'
  let g:ale_sign_warning =  nr2char(0x25b9) " '▹'
  let g:ale_statusline_format = [nr2char(0x25b8) . ' %d', nr2char(0x25b9) . ' %d', nr2char(0x25b4) . ' '] " '▸▹▴'
  let g:ale_sign_column_always = 1
  let g:ale_fixers = {
        \ 'javascript': [ 'eslint' ],
        \ 'json': [ 'eslint' ],
        \ 'python': [ 'black' ],
        \ 'ruby': [ 'rubocop' ],
        \ 'typescript': [ 'eslint' ],
        \ }
  let g:ale_linters = {
        \ 'go': [ 'golangci-lint' ],
        \ 'javascript': [ 'eslint' ],
        \ 'json': [ 'eslint' ],
        \ 'typescript': [ 'eslint', 'tsserver' ],
        \ 'perl': [ 'perl' ],
        \ 'python': [ 'pyls' ],
        \ 'ruby': [ 'solargraph' ],
        \ 'vim': [ 'vint' ],
        \ 'vue': [ 'vls' ],
        \ }
  let g:ale_sh_shellcheck_options = '-x'
  let g:ale_go_golangci_lint_package = 1
  let g:ale_python_pylint_change_directory = 0
  let g:ale_python_mypy_options = '--ignore-missing-imports --show-column-numbers --strict'
  let g:ale_python_mypy_detect_notes = 1
  nmap <silent> Ë <Plug>(ale_previous_wrap)
  nmap <silent> Ê <Plug>(ale_next_wrap)
  nmap <silent>  <Plug>(ale_previous_wrap)
  nmap <silent> Ô <Plug>(ale_next_wrap)
  nmap <silent> <A-K> <Plug>(ale_previous_wrap)
  nmap <silent> <A-J> <Plug>(ale_next_wrap)
'''
hook_post_update = '''
  !gem install --user-install rubocop solargraph
  !npm install -g eslint tslint prettier vue-language-server
  !pip3 install -U --user black vint python-language-server
'''
# }}}

[plugins.ftplugin]
python = ''' "{{{
  nmap <buffer> <silent> K          <Plug>(ale_hover)
  nmap <buffer> <silent> gd         <Plug>(ale_go_to_definition)
  nmap <buffer> <silent> <C-]>      <Plug>(ale_go_to_definition)
  nmap <buffer> <silent> <C-w><C-]> <Plug>(ale_go_to_definition_in_split)
"}}} '''
ruby = ''' "{{{
  nmap <buffer> <silent> K          <Plug>(ale_hover)
  nmap <buffer> <silent> gd         <Plug>(ale_go_to_definition)
  nmap <buffer> <silent> <C-]>      <Plug>(ale_go_to_definition)
  nmap <buffer> <silent> <C-w><C-]> <Plug>(ale_go_to_definition_in_split)
"}}} '''
typescript = ''' "{{{
  nmap <buffer> <silent> K          <Plug>(ale_hover)
  nmap <buffer> <silent> gd         <Plug>(ale_go_to_definition)
  nmap <buffer> <silent> <C-]>      <Plug>(ale_go_to_definition)
  nmap <buffer> <silent> <C-w><C-]> <Plug>(ale_go_to_definition_in_split)
"}}} '''
vue = ''' "{{{
  nmap <buffer> <silent> K          <Plug>(ale_hover)
  nmap <buffer> <silent> gd         <Plug>(ale_go_to_definition)
  nmap <buffer> <silent> <C-]>      <Plug>(ale_go_to_definition)
  nmap <buffer> <silent> <C-w><C-]> <Plug>(ale_go_to_definition_in_split)
"}}} '''

[[plugins]]
repo      = 'wellle/tmux-complete.vim'
on_source = ['deoplete.nvim']
hook_add  = 'let g:tmuxcomplete#trigger = ""'

[[plugins]]
repo      = 'Shougo/neco-syntax'
on_source = ['deoplete.nvim']
