[ftplugin] #{{{
applescript = 'inoremap <buffer> <A-m> ￢<CR>'

c = ''' "{{{
  setlocal tabstop=8
  setlocal shiftwidth=8
  setlocal softtabstop=8
  setlocal noexpandtab
"}}} '''

css = 'setlocal iskeyword+=-'

fish = ''' "{{{
  set tabstop=2
  set shiftwidth=2
  set softtabstop=2
"}}} '''

floaterm = 'set winblend=30'

git = 'let b:dwm_disabled = v:true'

gitcommit = 'setlocal colorcolumn=50,72'

go_gohtmltmpl = ''' "{{{
  set tabstop=4
  set shiftwidth=4
  set softtabstop=4
"}}} '''

help = 'setlocal nolist nonumber norelativenumber'

html_javascript = ''' "{{{
  setlocal tabstop=2
  setlocal shiftwidth=2
  setlocal softtabstop=2
"}}} '''

jinja = ''' "{{{
  if &filetype =~ '\.jinja$'
    ALEDisableBuffer
    let b:ale_fix_on_save = 0
  endif
"}}} '''

json = ''' "{{{
  setlocal tabstop=4
  setlocal shiftwidth=4
  setlocal softtabstop=4
  setlocal nocursorcolumn
  setlocal foldmethod=syntax
  setlocal foldtext=JsonFoldText()

  function! JsonFoldText() abort
    let line = getline(v:foldstart)
    let sub = substitute(line, '\v^\s+([^"]*")?', '', '')
    let sub = substitute(sub, '\v("[^"]*)?\s*$', '', '')
    let level = len(v:folddashes)
    if level <= 12
      let level = nr2char(0x2170 + level - 1) . ' '
    endif
    return printf('%s %3d 行: %s ', level, v:foldend - v:foldstart + 1, sub)
  endfunction
"}}} '''

perl = ''' "{{{
  setlocal tabstop=4
  setlocal shiftwidth=4
  setlocal softtabstop=4
  setlocal foldtext=PerlFoldText()

  if $PERL5LIB !=# ''
    let &l:path = substitute($PERL5LIB, ':', ',', 'g')
  endif

  let s:subtest_re = '\vsubtest\s*([''"])(.{-})\1.*'

  function! PerlFoldText() abort
    let line = getline(v:foldstart)
    let sub = substitute(line, '^\s\+', '', '')
    let sub = substitute(sub, '\s\+$', '', '')
    let cases_part = ''
    if sub =~# s:subtest_re
      let sub = substitute(sub, s:subtest_re, '\2', '')
      let cases = 0
      let i = v:foldstart + 1
      while i <= v:foldend
        if getline(i) =~# s:subtest_re
          let cases = cases + 1
        endif
        let i = i + 1
      endwhile
      if cases > 0
        let cases_part = printf(' (+ %d case%s)', cases, cases > 1 ? 's' : '')
      endif
    endif

    let level = len(v:folddashes)
    if level <= 12
      let level = nr2char(0x2170 + level - 1) . ' '
    endif

    return printf('%s %3d 行: %s%s ', level, v:foldend - v:foldstart + 1, sub, cases_part)
  endfunction
"}}} '''

php = 'setlocal expandtab'

python = ''' "{{{
  setlocal tabstop=4
  setlocal softtabstop=4
  setlocal shiftwidth=4

  call delphinus#ale#set_pylintrc()
"}}} '''

qf = ''' "{{{
  let b:dwm_disabled = 1
  let b:cursorword = 0
  set nonumber
  set norelativenumber
  set nolist
  set colorcolumn=
"}}} '''

ruby = ''' "{{{
  setlocal tabstop=2
  setlocal shiftwidth=2
  setlocal softtabstop=2

  function! s:rspec_syntax_highlight()
    hi def link rubyRailsTestMethod Function
    syn keyword rubyRailsTestMethod describe context it its specify shared_context shared_examples shared_examples_for shared_context include_examples include_context it_should_behave_like it_behaves_like before after around subject fixtures controller_name helper_name scenario feature background given described_class
    syn match rubyRailsTestMethod '\<let\>!\='
    syn keyword rubyRailsTestMethod violated pending expect expect_any_instance_of allow allow_any_instance_of double instance_double mock mock_model stub_model xit
    syn match rubyRailsTestMethod '\.\@<!\<stub\>!\@!'
  endfunction

  autocmd Syntax ruby if ! RailsDetect() | call s:rspec_syntax_highlight() | endif
"}}} '''

scss = 'setlocal iskeyword+=-'

sh = 'setlocal ts=2 sts=2 sw=2'

tagbar = 'let b:dwm_disabled = 1'

toml = ''' "{{{
  set tabstop=2
  set shiftwidth=2
  set softtabstop=2
  setlocal foldmethod=marker
"}}} '''

undotree = ''' "{{{
  let b:dwm_disabled = 1
  execute 'vertical resize' g:undotree_SplitWidth
"}}} '''

vim = ''' "{{{
  setlocal expandtab
  setlocal shiftwidth=2
  setlocal softtabstop=2
  setlocal tabstop=2
"}}} '''

vue = ''' "{{{
  setlocal iskeyword+=$
  setlocal iskeyword+=-
"}}} '''
#}}}

# Shougowares and their dependencies {{{
[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = ''' "{{{
  function s:dein_cleanup() abort
    echo '[dein] Removing disabled plugins...'
    call map(dein#check_clean(), "delete(v:val, 'rf')")
    call dein#recache_runtimepath()
    echohl WarningMsg
    echo '[dein] Successfully removed disabled plugins'
    echohl None
  endfunction

  command DeinCleanUp call s:dein_cleanup()

  if exists('$DEIN_GITHUB_TOKEN')
    let g:dein#install_github_api_token = $DEIN_GITHUB_TOKEN
  endif
"}}} '''

[[plugins]]
repo = 'delphinus/vim-denite-memo'

[[plugins]]
repo = 'fishbullet/deoplete-ruby'

[[plugins]]
repo = 'rafi/vim-denite-z'

[[plugins]]
repo = 'roxma/nvim-yarp'
hook_add = 'let g:python3_host_prog = exepath("python3")'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'ujihisa/neco-look'

[[plugins]]
repo = 'zchee/deoplete-zsh'
# }}}

# basic {{{
[[plugins]]
repo     = 'airblade/vim-rooter'

# TODO: https://github.com/antoinemadec/FixCursorHold.nvim
[[plugins]]
repo     = 'antoinemadec/FixCursorHold.nvim'
hook_add = 'let g:cursorhold_updatetime = 100'

[[plugins]]
repo = 'delphinus/vim-auto-cursorline'

[[plugins]]
repo = 'delphinus/vim-data-section-simple'

[[plugins]]
repo = 'delphinus/vim-quickfix-height'

[[plugins]]
repo     = 'direnv/direnv.vim'
#repo     = 'delphinus/direnv.vim'
#rev      = 'feature/direnv-export-post'

[[plugins]]
repo     = 'freitass/todo.txt-vim'
hook_add = '''
  let g:todo_load_python = 1
'''

[[plugins]]
repo = 'haya14busa/is.vim'

[[plugins]]
repo     = 'rbong/vim-crystalline'
hook_add = ''' "{{{
  let s:is_using_dein = exists('*dein#is_sourced')
  let s:exists_fugitive = 0
  let s:exists_tagbar = 0
  let s:currenttag_last_lookup = 0
  let s:currenttag = ''

  function! StatusLine(current, width)
    let l:s = ''
    if !s:exists_fugitive
      let s:exists_fugitive = get(g:, 'loaded_fugitive')
    endif
    if !s:exists_tagbar
      let s:exists_tagbar = s:is_using_dein ? dein#is_sourced('tagbar') : get(g:, 'loaded_tagbar')
    endif

    if a:current
      let l:s .= crystalline#mode() . crystalline#right_mode_sep('')
    else
      let l:s .= '%#CrystallineInactive#'
    endif

    let l:info_part = ''
    if a:current && a:width > 80
      let l:infos = []

      if s:exists_fugitive
        call add(l:infos, fugitive#head())
      endif

      if s:exists_tagbar
        let l:now = localtime()
        if s:currenttag_last_lookup != now
          let s:currenttag_last_lookup = now
          let s:currenttag = tagbar#currenttag('%s', '')
        endif
        if s:currenttag != ''
          call add(l:infos, s:currenttag)
        endif
      endif

      let l:info_part = crystalline#right_sep('', 'Fill') . ' ' . join(l:infos, " \ue0b1 ") . ' '  " U+E0B1: 
    endif

    let l:s .= len(l:info_part) && a:width <= 120 ? ' %t' : ' %f'
    let l:s .= '%h%w%m%r ' . l:info_part . '%='

    if a:current
      let l:s .= crystalline#left_sep('', 'Fill') . ' %{AsciiChar()} %{&paste ?"PASTE ":""}%{&spell?"SPELL ":""}'
      let l:s .= crystalline#left_mode_sep('')
    endif
    if len(l:info_part)
      if a:width > 120
        let l:s .= ' %{&ft}[%{&fenc!=#""?&fenc:&enc}][%{&ff}] %l/%L %c%V %P '
      elseif a:width > 80
        let l:s .= ' %{&ft} %P '
      else
        let l:s .= ' '
      endif
    else
      if a:width > 80
        let l:s .= ' %{&ft}[%{&fenc!=#""?&fenc:&enc}][%{&ff}] %l/%L %c%V %P '
      else
        let l:s .= ' '
      endif
    endif

    return l:s
  endfunction

  " use here :ascii instead of strgetchar() because the latter cannot catch
  " combined characters.
  " See https://stackoverflow.com/questions/23323747/vim-vimscript-get-exact-character-under-the-cursor
  function AsciiChar() abort
    " if char on cursor is `Λ̊`, :ascii returns below.
    " <Λ> 923, 16進数 039b, 8進数 1633 < ̊> 778, 16進数 030a, 8進数 1412
    let tmp = execute(':ascii')
    let chars = []
    call substitute(tmp, '<.>\s\+\d\+,\s\+\S\+ \x\+,\s\+\S\+ \d\+', '\=add(chars, submatch(0))', 'g')
    if len(chars) == 0
      return ''
    endif
    let ascii = []
    for c in chars
      let m = matchlist(c, '<\(.\)>\s\+\d\+,\s\+\S\+ \(\x\+\)')
      if len(m) > 0
        call add(ascii, printf('%s %s', m[1], m[2]))
      endif
    endfor
    return join(ascii, ' ')
  endfunction

  function! TabLine()
    let l:vimlabel = has('nvim') ?  ' NVIM ' : ' VIM '
    return crystalline#bufferline(2, len(l:vimlabel), 1) . '%=%#CrystallineTab# ' . l:vimlabel
  endfunction

  let g:crystalline_enable_sep = 1
  let g:crystalline_statusline_fn = 'StatusLine'
  let g:crystalline_tabline_fn = 'TabLine'
  let g:crystalline_theme = 'nord'

  set showtabline=2
  set guioptions-=e
  set laststatus=2
"}}} '''

[[plugins]]
repo     = 'ryanoasis/vim-devicons'
hook_add = ''' "{{{
  "   U+E287
  "   U+F07B
  "   U+E601
  "   U+E60e
  "   U+E769
  "   U+E7C4
  "   U+f542
  let g:webdevicons_enable_nerdtree = 0
  let g:WebDevIconsUnicodeByteOrderMarkerDefaultSymbol = "\ue287"
  let g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol = "\uf07b"
  " overwrite setting for 'vue' to use U+F542
  let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = #{
        \ fcgi:     "\ue769",
        \ perl:     "\ue769",
        \ sqlite:   "\ue7c4",
        \ tt:       "\ue60e",
        \ txt:      "\ue601",
        \ vue:      "\uf542",
        \ }
"}}} '''

[[plugins]]
repo     = 'tpope/vim-eunuch'
hook_add = "let $SUDO_ASKPASS = expand('~/git/dotfiles/bin/macos-askpass')"

[[plugins]]
repo     = 'tpope/vim-fugitive'
hook_add = ''' "{{{
  nnoremap git :<c-u>Git
  nnoremap g<space> :<c-u>Git 
  nnoremap d< :diffget //2<CR>
  nnoremap d> :diffget //3<CR>
  nnoremap gs :Gstatus<CR>
  nnoremap gc :Gbrowse<CR>
  vnoremap gc :Gbrowse<CR>
"}}} '''

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo    = 'tpope/vim-rhubarb'
depends = ['vim-fugitive']

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'wbthomason/lsp-status.nvim'

[[plugins]]
repo     = 'wincent/terminus'
# }}}

# colorscheme {{{
[[plugins]]
repo     = 'arcticicestudio/nord-vim'
hook_add = ''' "{{{
  let g:nord_italic = 1
  let g:nord_italic_comments = 1
  let g:nord_underline = 1
  let g:nord_uniform_diff_background = 1
  let g:nord_uniform_status_lines = 1
  let g:nord_cursor_line_number_background = 1

  function s:nord_overrides() abort
    hi Comment guifg=#CDD0BB
    hi Delimiter guifg=#81A1C1
    hi DeniteFilter guifg=#D8DEE9 guibg=#183203 ctermfg=NONE ctermbg=0 gui=NONE
    hi FloatPreview guifg=#D8DEE9 guibg=#183203 ctermfg=NONE ctermbg=0 gui=NONE
    hi FloatPreviewTransparent guifg=#183203 guibg=#183203 ctermfg=NONE ctermbg=0 gui=NONE
    hi Folded guifg=#D08770 gui=NONE
    hi Identifier guifg=#8FBCBB
    hi NormalFloat guifg=#D8DEE9 guibg=#0B1900 ctermfg=NONE ctermbg=0 gui=NONE
    hi Special guifg=#D08770
    hi Title gui=bold cterm=bold

    " for gitgutter
    hi SignifyLineAdd ctermbg=233 guibg=#122b0c
    hi SignifyLineChange ctermbg=236 guibg=#342e0e
    hi SignifyLineDelete ctermbg=235 guibg=#4e2728

    " for vim-go
    " See https://github.com/arcticicestudio/nord-vim/pull/219
    hi goDeclaration  guifg=#b48ead
    hi goBuiltins     guifg=#88c0d0
    hi goFunctionCall guifg=#5e81ac
    hi goVarDefs      guifg=#bf616a
    hi goVarAssign    guifg=#bf616a
    hi goVar          guifg=#b48ead
    hi goConst        guifg=#b48ead
    hi goType         guifg=#ebcb8b
    hi goTypeName     guifg=#ebcb8b
    hi goDeclType     guifg=#88c0d0
    hi goTypeDecl     guifg=#b48ead

    " for visual-eof.lua
    hi VisualEOL   guifg=#a3be8c
    hi VisualNoEOL guifg=#bf616a

    if has('nvim')
      hi GitGutterAddLineNr guifg=#a3be8c guibg=#163601 gui=bold
      hi GitGutterChangeDeleteLineNr guifg=#ebcb8b guibg=#432d00 gui=bold
      hi GitGutterChangeLineNr guifg=#ebcb8b guibg=#432d00 gui=bold
      hi GitGutterDeleteLineNr guifg=#bf616a guibg=#52050c gui=bold

      " for ALE
      hi ALEErrorSignLineNr guifg=#bf616a guibg=#52050c gui=bold
      hi ALEInfoSignLineNr guifg=#5e81ac guibg=#153b68 gui=bold
      hi ALEStyleErrorSignLineNr guifg=#bf616a guibg=NONE gui=bold
      hi ALEStyleWarningSignLineNr guifg=#ebcb8b guibg=NONE gui=bold
      hi ALEWarningSignLineNr guifg=#ebcb8b guibg=#432d00 gui=bold
      hi ALEErrorSign guifg=#bf616a guibg=#52050c gui=bold
      hi ALEInfoSign guifg=#5e81ac guibg=#153b68 gui=bold
      hi ALEStyleErrorSign guifg=#bf616a guibg=NONE gui=bold
      hi ALEStyleWarningSign guifg=#ebcb8b guibg=NONE gui=bold
      hi ALEWarningSign guifg=#ebcb8b guibg=#432d00 gui=bold
      hi ALEVirtualTextError guifg=#bf616a guibg=#52050c gui=bold
      hi ALEVirtualTextInfo guifg=#5e81ac guibg=#153b68
      hi ALEVirtualTextStyleError guifg=#bf616a guibg=NONE
      hi ALEVirtualTextStyleWarning guifg=#ebcb8b guibg=NONE
      hi ALEVirtualTextWarning guifg=#ebcb8b guibg=#432d00

      " LSP diagnostics
      hi LspDiagnosticsDefaultError guifg=#bf616a guibg=#52050c gui=bold
      hi LspDiagnosticsFloatingError guifg=#bf616a guibg=NONE gui=bold
      hi LspDiagnosticsUnderlineError guifg=#bf616a guibg=NONE gui=underline
      hi LspDiagnosticsDefaultHint guifg=#a3be8c guibg=#456c26
      hi LspDiagnosticsFloatingHint guifg=#a3be8c guibg=NONE
      hi LspDiagnosticsUnderlineHint guifg=#a3be8c guibg=NONE
      hi LspDiagnosticsDefaultInformation guifg=#5e81ac guibg=#153b68
      hi LspDiagnosticsFloatingInformation guifg=#5e81ac guibg=NONE
      hi LspDiagnosticsUnderlineInformation guifg=#5e81ac guibg=NONE gui=underline
      hi LspDiagnosticsDefaultWarning guifg=#ebcb8b guibg=#432d00
      hi LspDiagnosticsFloatingWarning guifg=#ebcb8b guibg=NONE
      hi LspDiagnosticsUnderlineWarning guifg=#ebcb8b guibg=NONE gui=underline
      hi link LspReferenceText LspDiagnosticsDefaultInformation
      hi link LspReferenceRead LspDiagnosticsDefaultHint
      hi link LspReferenceWrite LspDiagnosticsDefaultWarning

      " nvim-treesitter
      hi TSCurrentScope guibg=#313743
      hi rainbowcol1 guifg=#bf616a
      hi rainbowcol2 guifg=#d08770
      hi rainbowcol3 guifg=#b48ead
      hi rainbowcol4 guifg=#ebcb8b
      hi rainbowcol5 guifg=#a3b812
      hi rainbowcol6 guifg=#81a1c1
      hi rainbowcol7 guifg=#8fbcbb

      hi TSConditional guifg=#88c0d0
      hi TSConstant guifg=#d8dee9 gui=bold
      hi TSConstructor guifg=#ebcb8b gui=bold
      hi TSException guifg=#88c0d0 gui=italic
      hi TSKeyword guifg=#9a6590 gui=bold
      hi TSMethod guifg=#ebcb8b
      hi TSProperty guifg=#8fbcbb gui=italic
      hi TSRepeat guifg=#88c0d0
      hi TSTypeBuiltin guifg=#81a1c1 gui=bold
      hi TSVariableBuiltin guifg=#d08770
    endif
  endfunction

  augroup nord-overrides
    autocmd!
    autocmd ColorScheme nord call s:nord_overrides()
  augroup END
"}}} '''

[[plugins]]
repo     = 'lifepillar/vim-solarized8'
hook_add = ''' "{{{
  let g:solarized_diffmode = 'normal'
  let g:solarized_enable_extra_hi_groups = 1
  let g:solarized_visibility = 'normal'
  let g:solarized_term_italics = 1

  function! s:solarized8_overrides(background) abort
    if a:background ==# 'dark'
      hi NormalFloat ctermfg=247 ctermbg=236 guifg=#93a1a1 guibg=#01232b guisp=NONE cterm=NONE gui=NONE
      hi DeniteFilter ctermfg=247 ctermbg=236 guifg=#93a1a1 guibg=#262c00 guisp=NONE cterm=NONE gui=NONE
      hi FloatPreview ctermfg=247 ctermbg=236 guifg=#93a1a1 guibg=#262c00 guisp=NONE cterm=NONE gui=NONE
      hi FloatPreviewTransparent ctermfg=247 ctermbg=236 guifg=#262c00 guibg=#262c00 guisp=NONE cterm=NONE gui=NONE

      " for gitgutter
      hi SignifyLineAdd ctermbg=192 guibg=#262c00
      hi SignifyLineChange ctermbg=230 guibg=#674e00
      hi SignifyLineDelete ctermbg=224 guibg=#7d2500
      hi SignifyLineAdd ctermbg=192 guibg=#262c00
      hi SignifyLineChange ctermbg=230 guibg=#423200
      hi SignifyLineDelete ctermbg=224 guibg=#571a00
      if has('nvim')
        hi GitGutterAddLineNr guifg=#859900 guibg=#424c00 gui=bold
        hi GitGutterChangeLineNr guifg=#b58900 guibg=#674e00 gui=bold
        hi GitGutterDeleteLineNr guifg=#cb4b16 guibg=#7d2500 gui=bold
        hi GitGutterChangeDeleteLineNr guifg=#b58900 guibg=#674e00 gui=bold

        " for ALE
        hi ALEErrorSignLineNr guifg=#cb4b16 guibg=#674e00 gui=bold
        hi ALEStyleErrorSignLineNr guifg=#cb4b16 guibg=#674e00 gui=bold
        hi ALEWarningSignLineNr guifg=#b58900 guibg=#674e00 gui=bold
        hi ALEStyleWarningSignLineNr guifg=#b58900 guibg=#674e00 gui=bold
        hi ALEInfoSignLineNr guifg=#859900 guibg=#424c00 gui=bold
      endif
    else
      hi NormalFloat ctermfg=242 ctermbg=254 guifg=#586e75 guibg=#fffcf4 guisp=NONE cterm=NONE gui=NONE
      hi DeniteFilter ctermfg=242 ctermbg=254 guifg=#586e75 guibg=#c2d735 guisp=NONE cterm=NONE gui=NONE
      hi FloatPreview ctermfg=242 ctermbg=254 guifg=#586e75 guibg=#c2d735 guisp=NONE cterm=NONE gui=NONE
      hi FloatPreviewTransparent ctermfg=242 ctermbg=254 guifg=#c2d735 guibg=#c2d735 guisp=NONE cterm=NONE gui=NONE

      " fot gitgutter
      hi SignifyLineAdd ctermbg=192 guibg=#f0f9e2
      hi SignifyLineChange ctermbg=230 guibg=#fff4c9
      hi SignifyLineDelete ctermbg=224 guibg=#ffe9ef
      if has('nvim')
        hi GitGutterAddLineNr guifg=#ebfa88 guibg=#a3b812 gui=bold
        hi GitGutterChangeLineNr guifg=#fff6d8 guibg=#dbae0e gui=bold
        hi GitGutterDeleteLineNr guifg=#ffe4d8 guibg=#e66f3c gui=bold
        hi GitGutterChangeDeleteLineNr guifg=#fff6d8 guibg=#dbae0e gui=bold

        " for ALE
        hi ALEErrorSignLineNr guifg=#ffe4d8 guibg=#e66f3c gui=bold
        hi ALEStyleErrorSignLineNr guifg=#ffe4d8 guibg=#e66f3c gui=bold
        hi ALEWarningSignLineNr guifg=#fff6d8 guibg=#dbae0e gui=bold
        hi ALEStyleWarningSignLineNr guifg=#fff6d8 guibg=#dbae0e gui=bold
        hi ALEInfoSignLineNr guifg=#ebfa88 guibg=#a3d812 gui=bold
      endif
    endif
  endfunction

  augroup solarized8-overrides
    autocmd!
    autocmd ColorScheme solarized8 call <SID>solarized8_overrides(&background)
    autocmd ColorScheme solarized8_flat call <SID>solarized8_overrides(&background)
    autocmd ColorScheme solarized8_high call <SID>solarized8_overrides(&background)
    autocmd ColorScheme solarized8_low call <SID>solarized8_overrides(&background)
  augroup END
"}}} '''

[[plugins]]
repo = 'mtyn/polar'
rtp  = 'vim'
# }}}

# syntax {{{
[[plugins]]
repo = 'Glench/Vim-Jinja2-Syntax'

[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'

[[plugins]]
repo = 'aklt/plantuml-syntax'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'delphinus/vim-toml-dein'

[[plugins]]
repo = 'hail2u/vim-css3-syntax'

[[plugins]]
repo = 'isobit/vim-caddyfile'

[[plugins]]
repo     = 'motemen/vim-syntax-hatena'
hook_add = 'let g:hatena_syntax_html = v:true'

[[plugins]]
repo = 'nikvdp/ejs-syntax'

[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = ''' "{{{
  let g:vim_markdown_conceal = 0
  let g:vim_markdown_folding_disabled = 1
  let g:vim_markdown_new_list_item_indent = 2
"}}} '''

[[plugins]]
repo = 'digitaltoad/vim-pug'

[[plugins]]
repo = 'isRuslan/vim-es6'

[[plugins]]
repo = 'kchmck/vim-coffee-script'

[[plugins]]
repo = 'motemen/xslate-vim'

[[plugins]]
repo = 'moznion/vim-cpanfile'

[[plugins]]
repo = 'pboettch/vim-cmake-syntax'
hook_add = ''' "{{{
  autocmd BufNewFile,BufRead CMake*,*.cmake.*,*.cmake set filetype=cmake
"}}} '''

[[plugins]]
repo     = 'vim-perl/vim-perl'
hook_add = ''' "{{{
  let g:perl_include_pod = 1
  unlet! g:perl_no_scope_in_variables
  unlet! g:perl_no_extended_vars
  let g:perl_string_as_statement = 1
  unlet! g:perl_no_sync_on_sub
  unlet! g:perl_no_sync_on_global_var
  let g:perl_sync_dist = 1000
  let g:perl_fold = 1
  unlet! g:perl_fold_blocks
  let g:perl_nofold_packages = 1
  unlet! g:perl_nofold_subs
  let g:perl_fold_anonymous_subs = 1
  let g:perl_sub_signatures = 1
"}}} '''
# }}}

# filetype {{{
[[plugins]]
repo = 'asciidoc/vim-asciidoc'

[[plugins]]
repo = 'c9s/perlomni.vim'

[[plugins]]
repo = 'dNitro/vim-pug-complete'

[[plugins]]
#repo = 'dag/vim-fish'
repo = 'blankname/vim-fish'

[[plugins]]
repo = 'delphinus/vim-firestore'

[[plugins]]
repo = 'gisphm/vim-gitignore'
hook_add = '''
  augroup DetectOtherIgnores
    autocmd!
    autocmd BufNewFile,BufRead .gcloudignore set filetype=gitignore
  augroup END
'''

[[plugins]]
repo = 'kchmck/vim-coffee-script'
hook_add = '''
  augroup DetectCSON
    autocmd!
    autocmd BufNewFile,BufRead *.cson set filetype=coffee
  augroup END
'''

[[plugins]]
repo = 'kevinoid/vim-jsonc'

[[plugins]]
repo = 'jason0x43/vim-js-indent'

[[plugins]]
repo = 'mustache/vim-mustache-handlebars'

[[plugins]]
repo     = 'pearofducks/ansible-vim'
hook_add = '''
  let g:ansible_name_highlight = 'b'
  let g:ansible_extra_keywords_highlight = 1
'''

[[plugins]]
repo     = 'posva/vim-vue'

[[plugins]]
repo = 'tmux-plugins/vim-tmux'

[[plugins]]
repo = 'uarun/vim-protobuf'
# }}}

# vim-script {{{
[[plugins]]
repo = 'vim-scripts/HiColors'

[[plugins]]
repo = 'vim-scripts/applescript.vim'

[[plugins]]
repo = 'vim-scripts/autodate.vim'
hook_add = '''let g:autodate_format = '%FT%T%z' '''

[[plugins]]
repo = 'vim-scripts/fontforge_script.vim'

[[plugins]]
repo = 'vim-scripts/nginx.vim'
# }}}

# lua-script {{{
[[plugins]]
repo     = 'LumaKernel/nvim-visual-eof.lua'
if       = 'has("nvim")'
hook_add = ''' "{{{
  lua << EOF
    require'visual-eof'.setup{
      text_EOL = ' ';
      text_NOEOL = ' ';
      ft_ng = {
        'denite',
        'denite-filter',
        'floaterm',
        'fugitive.*',
        'git.*',
      };
    }
EOF
"}}} '''

[[plugins]]
repo = 'Xuyuanp/scrollbar.nvim'
if = 'has("nvim")'
hook_add = ''' "{{{
  let g:scrollbar_shape = #{
    \ head: '╽',
    \ body: '┃',
    \ tail: '╿',
    \ }
  let g:scrollbar_highlight = #{
    \ head: 'Todo',
    \ body: 'Todo',
    \ tail: 'Todo',
    \ }
  let g:scrollbar_excluded_filetypes = ['denite-filter']

  let s:scrollbar_enabled = v:false
  function s:scrollbar_toggle() abort
    if s:scrollbar_enabled
      silent! lua require('scrollbar').clear()
      augroup my_scrollbar_nvim
        autocmd!
      augroup end
      let s:scrollbar_enabled = v:false
    else
      silent! lua require('scrollbar').show()
      augroup my_scrollbar_nvim
        autocmd!
        autocmd WinEnter,FocusGained,CursorMoved,VimResized * silent! lua require('scrollbar').show()
        autocmd WinLeave,FocusLost,BufLeave                 * silent! lua require('scrollbar').clear()
      augroup end
      let s:scrollbar_enabled = v:true
    endif
  endfunction
  call s:scrollbar_toggle()
  command! ToggleScrollbar call <SID>scrollbar_toggle()

  " TODO: deal with :only in this plugin
  function! s:only_and_show() abort
    only
    silent! lua require('scrollbar').show()
  endfunction

  map <C-w>o :silent call <SID>only_and_show()<CR>
"}}} '''

[[plugins]]
repo     = 'neovim/nvim-lspconfig'
if       = 'has("nvim")'
hook_add = ''' "{{{
  sign define LspDiagnosticsSignError text=● texthl=LspDiagnosticsDefaultError linehl= numhl=
  sign define LspDiagnosticsSignWarning text=○ texthl=LspDiagnosticsDefaultWarning linehl= numhl=
  sign define LspDiagnosticsSignInformation text=■ texthl=LspDiagnosticsDefaultInformation linehl= numhl=
  sign define LspDiagnosticsSignHint text=□ texthl=LspDiagnosticsDefaultHint linehl= numhl=

  function ShowLSPSettings() abort
    lua print(vim.inspect(vim.lsp.buf_get_clients()))
  endfunction

  function ReloadLSPSettings() abort
    lua vim.lsp.stop_client(vim.lsp.get_active_clients())
    edit
  endfunction

  lua <<EOF
    local map = function(type, key, value)
      vim.fn.nvim_buf_set_keymap(0, type, key, value, { noremap = true, silent = true });
    end

    local lsp_on_attach = function(client)
      print('LSP started.');
      if client.config.flags then
        client.config.flags.allow_incremental_sync = true
      end

      map('n', '1gD',        '<Cmd>lua vim.lsp.buf.type_definition()<CR>')
      map('n', '<A-J>',      '<Cmd>lua vim.lsp.diagnostic.goto_next()<CR>')
      map('n', '<A-K>',      '<Cmd>lua vim.lsp.diagnostic.goto_prev()<CR>')
      map('n', '<C-]>',      '<Cmd>lua vim.lsp.buf.definition()<CR>')
      map('n', '<C-w><C-]>', '<Cmd>split<CR><Cmd>lua vim.lsp.buf.definition()<CR>')
      map('n', '<C-x><C-k>', '<Cmd>lua vim.lsp.buf.signature_help()<CR>')
      map('n', 'K',          '<Cmd>lua vim.lsp.buf.hover()<CR>')
      map('n', 'g0',         '<Cmd>lua vim.lsp.buf.document_symbol()<CR>')
      map('n', 'g=',         '<Cmd>lua vim.lsp.buf.formatting()<CR>')
      map('n', 'gA',         '<Cmd>lua vim.lsp.buf.code_action()<CR>')
      map('n', 'gD',         '<Cmd>lua vim.lsp.buf.implementation()<CR>')
      map('n', 'gK',         '<Cmd>lua vim.lsp.util.show_line_diagnostics()<CR>')
      map('n', 'gR',         '<Cmd>lua vim.lsp.buf.rename()<CR>')
      map('n', 'gW',         '<Cmd>lua vim.lsp.buf.workspace_symbol()<CR>')
      map('n', 'gd',         '<Cmd>lua vim.lsp.buf.declaration()<CR>')
      map('n', 'gli',        '<Cmd>lua vim.lsp.buf.incoming_calls()<CR>')
      map('n', 'glo',        '<Cmd>lua vim.lsp.buf.outgoing_calls()<CR>')
      map('n', 'gr',         '<Cmd>lua vim.lsp.buf.references()<CR>')
    end

    vim.lsp.handlers['textDocument/publishDiagnostics'] = vim.lsp.with(
      vim.lsp.diagnostic.on_publish_diagnostics, {
        underline = true,
        virtual_text = true,
        signs = true,
      }
    )

    local lsp = require'lspconfig'
    lsp.bashls.setup{on_attach = lsp_on_attach}
    lsp.clangd.setup{on_attach = lsp_on_attach}
    lsp.cssls.setup{on_attach = lsp_on_attach}
    lsp.dockerls.setup{on_attach = lsp_on_attach}
    -- lsp.efm.setup{on_attach = lsp_on_attach}
    lsp.html.setup{on_attach = lsp_on_attach}
    lsp.jsonls.setup{on_attach = lsp_on_attach}
    lsp.pyright.setup{on_attach = lsp_on_attach}
    lsp.solargraph.setup{on_attach = lsp_on_attach}
    lsp.tsserver.setup{on_attach = lsp_on_attach}
    lsp.vimls.setup{on_attach = lsp_on_attach}
    lsp.yamlls.setup{on_attach = lsp_on_attach}

    -- for Go
    lsp.gopls.setup{
      on_attach = lsp_on_attach,
      settings = {
        hoverKind = 'NoDocumentation',
        deepCompletion = true,
        fuzzyMatching = true,
        completeUnimported = true,
        usePlaceholders = true,
      },
    }

    -- for Lua
    lsp.sumneko_lua.setup{
      on_attach = lsp_on_attach,
      settings = {
        Lua = {
          runtime = {
            version = 'LuaJIT',
            path = vim.split(package.path, ';'),
          },
          completion = {
            keywordSnippet = 'Disable',
          },
          diagnostics = {
            enable = true,
            globals = {
              'vim', 'describe', 'it', 'before_each', 'after_each',
            },
          },
          workspace = {
            library = {
              [vim.fn.expand('$VIMRUNTIME/lua')] = true,
              [vim.fn.expand('$VIMRUNTIME/lua/vim/lsp')] = true,
            },
          },
        }
      }
    }
EOF

"}}} '''
hook_source = ''' "{{{
  " debug print in ~/.local/share/nvim/vim-lsp.log
  "lua vim.lsp.set_log_level("debug")
"}}} '''
# }}}

# dependencies {{{
[[plugins]]
repo = 'inkarkat/vim-ingo-library'

[[plugins]]
repo = 'kana/vim-textobj-user'
# }}}
