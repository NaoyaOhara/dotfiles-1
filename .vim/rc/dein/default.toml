[ftplugin] #{{{
applescript = ''' "{{{
  inoremap <buffer> <A-m> ￢<CR>
  inoremap <buffer> µ ￢<CR>
"}}} '''

c = ''' "{{{
  setlocal tabstop=8
  setlocal shiftwidth=8
  setlocal softtabstop=8
  setlocal noexpandtab
"}}} '''

css = 'setlocal iskeyword+=-'

go_gohtmltmpl = ''' "{{{
  set tabstop=4
  set shiftwidth=4
  set softtabstop=4
"}}} '''

help = 'setlocal nolist nonumber norelativenumber'

html_javascript = ''' "{{{
  setlocal tabstop=2
  setlocal shiftwidth=2
  setlocal softtabstop=2
"}}} '''

json = ''' "{{{
  setlocal tabstop=4
  setlocal shiftwidth=4
  setlocal softtabstop=4
  setlocal nocursorcolumn
"}}} '''

perl = ''' "{{{
  let g:perl_include_pod = 1
  unlet! g:perl_no_scope_in_variables
  unlet! g:perl_no_extended_vars
  let g:perl_string_as_statement = 1
  unlet! g:perl_no_sync_on_sub
  unlet! g:perl_no_sync_on_global_var
  let g:perl_sync_dist = 1000
  let g:perl_fold = 1
  unlet! g:perl_fold_blocks
  let g:perl_nofold_packages = 1
  unlet! g:perl_nofold_subs
  let g:perl_fold_anonymous_subs = 1
  let g:perl_sub_signatures = 1

  set iskeyword-=-
  set iskeyword-=:

  setlocal tabstop=4
  setlocal shiftwidth=4
  setlocal softtabstop=4

  call delphinus#perl#manage_local_perl(expand('%'))
"}}} '''

php = 'setlocal expandtab'

python = ''' "{{{
  setlocal tabstop=4
  setlocal softtabstop=4
  setlocal shiftwidth=4

  call delphinus#ale#set_pylintrc()
"}}} '''

ruby = ''' "{{{
  setlocal tabstop=2
  setlocal shiftwidth=2
  setlocal softtabstop=2

  function! s:rspec_syntax_highlight()
    hi def link rubyRailsTestMethod Function
    syn keyword rubyRailsTestMethod describe context it its specify shared_context shared_examples shared_examples_for shared_context include_examples include_context it_should_behave_like it_behaves_like before after around subject fixtures controller_name helper_name scenario feature background given described_class
    syn match rubyRailsTestMethod '\<let\>!\='
    syn keyword rubyRailsTestMethod violated pending expect expect_any_instance_of allow allow_any_instance_of double instance_double mock mock_model stub_model xit
    syn match rubyRailsTestMethod '\.\@<!\<stub\>!\@!'
  endfunction

  autocmd Syntax ruby if ! RailsDetect() | call s:rspec_syntax_highlight() | endif
"}}} '''

scss = 'setlocal iskeyword+=-'

toml = 'setlocal foldmethod=marker'

vim = ''' "{{{
  setlocal expandtab
  setlocal shiftwidth=2
  setlocal softtabstop=2
  setlocal tabstop=2
"}}} '''
#}}}

# Shougowares and their dependencies {{{
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'delphinus/vim-denite-memo'

[[plugins]]
repo = 'fishbullet/deoplete-ruby'

[[plugins]]
repo = 'rafi/vim-denite-z'

[[plugins]]
repo = 'roxma/nvim-yarp'
hook_add = '''
  " Set path for python3 for python37u packages in CentOS7
  if !executable('python3') && executable('python3.7')
    let g:python3_host_prog = exepath('python3.7')
  endif
'''

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'ujihisa/neco-look'

[[plugins]]
repo = 'zchee/deoplete-zsh'
# }}}

# for lightline {{{
[[plugins]]
repo     = 'airblade/vim-gitgutter'
hook_add = ''' "{{{
  set updatetime=100
  let g:gitgutter_diff_args='-w --indent-heuristic'
  let g:gitgutter_highlight_lines = 0
  let g:gitgutter_sign_added='✓'
  let g:gitgutter_sign_modified='⤷'
  let g:gitgutter_sign_removed='✗'
  let g:gitgutter_sign_removed_first_line='↑'
  let g:gitgutter_sign_modified_removed='•'
  let g:gitgutter_terminal_reports_focus=0
"}}} '''
hook_post_source = ''' "{{{
  if &background ==# 'light'
    hi GitGutterAddLine ctermbg=192 guibg=#f0f9e2
    hi GitGutterChangeLine ctermbg=230 guibg=#fff4c9
    hi GitGutterDeleteLine ctermbg=224 guibg=#ffe9ef
  elseif g:colors_name !=# 'nord'
    hi GitGutterAddLine ctermbg=233 guibg=#122b0c
    hi GitGutterChangeLine ctermbg=236 guibg=#342e0e
    hi GitGutterDeleteLine ctermbg=235 guibg=#4e2728
  endif
"}}} '''

[[plugins]]
repo     = 'delphinus/lightline-delphinus'
depends  = ['lightline', 'ale', 'tagbar', 'vim-gitgutter']
hook_add = ''' "{{{
  let g:lightline_delphinus_use_powerline_glyphs = 1
  let g:lightline_delphinus_use_nerd_fonts_glyphs = 1
  let g:lightline_delphinus_tagbar_enable = 1
  let g:lightline_delphinus_gitgutter_enable = 1

  function! s:lightline_start() abort
    let g:lightline_delphinus_colorscheme = g:use_solarized || g:colors_name =~# '^solarized' ? 'solarized_improved' : 'nord_improved'
    " execute codes below only after loading lightline because this function
    " will be called BEFORE it. Strange.
    if !get(g:, 'loaded_lightline', 0)
      return
    endif
    let path = dein#get('lightline-delphinus').path
    " source this always to detect 'background'
    execute 'source' path . '/autoload/lightline/colorscheme/' . g:lightline.colorscheme . '.vim'
    let g:lightline.colorscheme = g:lightline_delphinus_colorscheme

    " https://github.com/itchyny/lightline.vim/issues/241#issuecomment-322033789
    call lightline#init()
    call lightline#colorscheme()
    call lightline#update()
  endfunction

  " s:lightline_start will be called in changing colorscheme or 'background'
  augroup LightlineStart
    autocmd!
    autocmd ColorScheme * call <SID>lightline_start()
  augroup END
"}}} '''

[[plugins]]
repo     = 'itchyny/lightline.vim'

[[plugins]]
repo     = 'majutsushi/tagbar'
hook_add = ''' "{{{
  let g:tagbar_left = 1
  let g:tagbar_autoclose = 1
  let g:tagbar_autofocus = 1
  let g:tagbar_show_linenumbers = 1
  let g:tagbar_iconchars = [nr2char(0xe5ff) . ' ', nr2char(0xe5fe) . ' '] "  , 
  let g:tagbar_autopreview = 1
  augroup TagbarWindow
    autocmd!
    autocmd BufWinEnter * if &previewwindow | setlocal nonumber norelativenumber | endif
  augroup END
  nmap <C-t> :<C-u>TagbarToggle<CR>
"}}} '''

[[plugins]]
repo     = 'w0rp/ale'
#repo     = 'delphinus/ale'
#rev      = 'feature/detect-note-in-mypy'
hook_add = '''
  let g:ale_fix_on_save = 1
  let g:ale_completion_enabled = 1
  let g:ale_echo_msg_format = '%severity%  %linter% - %s'
  "let g:ale_echo_msg_error_str = nr2char(0xf42d) . ' ' " ' '
  "let g:ale_echo_msg_warning_str = nr2char(0xf426) . ' ' " ' '
  "let g:ale_sign_error = nr2char(0xf42d) . ' ' " ' '
  "let g:ale_echo_msg_info_str = nr2char(0xf05a) . ' ' " ' '
  "let g:ale_sign_warning = nr2char(0xf426) . ' ' " ' '
  "let g:ale_statusline_format = [nr2char(0xf42d) . '  %d', nr2char(0xf426) . '  %d', nr2char(0xf4e6) . '  '] " '   '
  let g:ale_echo_msg_error_str = nr2char(0x25b8) " '▸'
  let g:ale_echo_msg_warning_str = nr2char(0x25b9) " '▹'
  let g:ale_echo_msg_info_str = nr2char(0x25b4) " '▴'
  let g:ale_sign_error =  nr2char(0x25b8) " '▸'
  let g:ale_sign_warning =  nr2char(0x25b9) " '▹'
  let g:ale_statusline_format = [nr2char(0x25b8) . ' %d', nr2char(0x25b9) . ' %d', nr2char(0x25b4) . ' '] " '▸▹▴'
  let g:ale_sign_column_always = 1
  let g:ale_fixers = {
        \ 'javascript': [ 'eslint' ],
        \ 'json': [ 'prettier' ],
        \ 'python': [ 'black' ],
        \ 'ruby': [ 'rubocop' ],
        \ 'typescript': [],
        \ }
  let g:ale_linters = {
        \ 'go': [ 'golangci-lint' ],
        \ 'javascript': [ 'eslint' ],
        \ 'json': [ 'prettier' ],
        \ 'typescript': [],
        \ 'perl': [ 'perl' ],
        \ 'vim': [ 'vint' ],
        \ }
  let g:ale_sh_shellcheck_options = '-x'
  let g:ale_go_golangci_lint_package = 1
  let g:ale_python_pylint_change_directory = 0
  let g:ale_python_mypy_options = '--ignore-missing-imports --show-column-numbers --strict'
  let g:ale_python_mypy_detect_notes = 1
  nmap <silent> Ë <Plug>(ale_previous_wrap)
  nmap <silent> Ê <Plug>(ale_next_wrap)
  nmap <silent>  <Plug>(ale_previous_wrap)
  nmap <silent> Ô <Plug>(ale_next_wrap)
  nmap <silent> <A-K> <Plug>(ale_previous_wrap)
  nmap <silent> <A-J> <Plug>(ale_next_wrap)
  augroup DisableALEInDiffBuffers
    autocmd!
    autocmd VimEnter,FilterWritePre * ALEDisableBuffer
  augroup END
  augroup DisableALEInDtsFiles
    autocmd!
    autocmd BufRead,BufNewFile *.d.ts ALEDisableBuffer
    autocmd BufRead,BufNewFile *.d.ts.map ALEDisableBuffer
  augroup END
'''
hook_post_update = '''
  !pip3 install -U --user black vint
  !npm install -g eslint tslint prettier
  !gem install --user-install rubocop
'''
# }}}

# basic {{{
[[plugins]]
repo     = 'airblade/vim-rooter'
hook_add = '''
  let g:rooter_silent_chdir = 1
'''

[[plugins]]
repo = 'delphinus/vim-auto-cursorline'

[[plugins]]
repo     = 'direnv/direnv.vim'
hook_add = '''
  let g:direnv_auto = 0
  augroup ExecDirenv
    autocmd!
    autocmd User RooterChDir call direnv#export()
  augroup END
  function! s:direnv_extra_vimrc() abort
    if exists('$EXTRA_VIMRC')
      for path in split($EXTRA_VIMRC, ':')
        if filereadable(path)
          echo 'Adding extra .vimrc:' path
          execute 'source' path
        endif
      endfor
    endif
  endfunction
  augroup direnv-extra-vimrc
    autocmd!
    autocmd User DirenvExportPost call <SID>direnv_extra_vimrc()
  augroup END
'''

[[plugins]]
repo     = 'freitass/todo.txt-vim'
hook_add = '''
  let g:todo_load_python = 1
'''

[[plugins]]
repo     = 'kana/vim-submode'
hook_add = ''' "{{{
  call submode#enter_with('DWM_size', 'n', '', '<C-w>>', ':call DWM_GrowMaster()<CR>')
  call submode#enter_with('DWM_size', 'n', '', '<C-w><', ':call DWM_ShrinkMaster()<CR>')
  call submode#map('DWM_size', 'n', '', '>', ':call DWM_GrowMaster()<CR>')
  call submode#map('DWM_size', 'n', '', '<', ':call DWM_ShrinkMaster()<CR>')
"}}} '''

[[plugins]]
repo = 'haya14busa/is.vim'

[[plugins]]
repo     = 'ryanoasis/vim-devicons'
hook_add = ''' "{{{
  " U+E287 =>  :
  " U+E601 =>  :
  " U+E60E =>  :
  " U+E769 =>  :
  " U+E7C4 =>  :
  " U+F07B =>  :
  " U+F542 =>  :
  let g:webdevicons_enable_nerdtree = 0
  let g:WebDevIconsUnicodeByteOrderMarkerDefaultSymbol = nr2char(0xe287)
  let g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol = nr2char(0xf07b)
  " overwrite setting for 'vue' to use U+F542
  let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {
        \ 'fcgi':     nr2char(0xe769),
        \ 'perl':     nr2char(0xe769),
        \ 'sqlite':   nr2char(0xe7c4),
        \ 'tt':       nr2char(0xe60e),
        \ 'txt':      nr2char(0xe601),
        \ 'vue':      nr2char(0xf542),
        \ }
"}}} '''

[[plugins]]
repo     = 'tpope/vim-fugitive'
hook_add = ''' "{{{
  nnoremap git :<c-u>Git
  nnoremap g<space> :<c-u>Git 
  nnoremap d< :diffget //2<CR>
  nnoremap d> :diffget //3<CR>
  nnoremap gs :Gstatus<CR>
  nnoremap gc :Gbrowse<CR>
  vnoremap gc :Gbrowse<CR>
"}}} '''

[[plugins]]
repo    = 'tpope/vim-rhubarb'
depends = ['fugitive']
# setting exists in .vimrc-local

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo     = 'wincent/terminus'
# }}}

# colorscheme {{{
[[plugins]]
#repo     = 'lifepillar/vim-solarized8'
repo     = 'delphinus/vim-solarized8'
rev      = 'feature/custom'
hook_add = ''' "{{{
  let g:solarized_diffmode = 'normal'
  let g:solarized_enable_extra_hi_groups = 1
  let g:solarized_visibility = 'normal'
  let g:solarized_term_italics = 1
"}}} '''

[[plugins]]
#repo = 'arcticicestudio/nord-vim'
repo = 'delphinus/nord-vim'
rev  = 'feature/custom'
hook_add = '''
  let g:nord_italic = 1
  let g:nord_italic_comments = 1
  let g:nord_underline = 1
  let g:nord_uniform_diff_background = 1
  let g:nord_cursor_line_number_background = 1
"}}} '''

# syntax {{{
[[plugins]]
repo = 'Glench/Vim-Jinja2-Syntax'

[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'

[[plugins]]
repo = 'aklt/plantuml-syntax'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'delphinus/vim-toml-dein'

[[plugins]]
repo = 'hail2u/vim-css3-syntax'

[[plugins]]
repo = 'isobit/vim-caddyfile'

[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = ''' "{{{
  let g:vim_markdown_conceal = 0
  let g:vim_markdown_folding_disabled = 1
  let g:vim_markdown_new_list_item_indent = 2
"}}} '''

[[plugins]]
repo = 'digitaltoad/vim-jade'

[[plugins]]
repo = 'isRuslan/vim-es6'

[[plugins]]
repo = 'kchmck/vim-coffee-script'

[[plugins]]
repo = 'motemen/xslate-vim'

[[plugins]]
repo = 'moznion/vim-cpanfile'

[[plugins]]
repo = 'vim-perl/vim-perl'
# }}}

# filetype {{{
[[plugins]]
repo   = 'ap/vim-css-color'
merged = 0

[[plugins]]
repo = 'c9s/perlomni.vim'

[[plugins]]
repo = 'delphinus/vim-rails'
rev  = 'feature/recognize-ridgepole'

[[plugins]]
repo = 'delphinus/vim-firestore'

[[plugins]]
repo = 'kchmck/vim-coffee-script'
hook_add = '''
  augroup DetectCSON
    autocmd!
    autocmd BufNewFile,BufRead *.cson set filetype=coffee
  augroup END
'''

[[plugins]]
repo = 'jason0x43/vim-js-indent'

[[plugins]]
repo = 'pangloss/vim-javascript'

[[plugins]]
repo     = 'pearofducks/ansible-vim'
hook_add = '''
  let g:ansible_name_highlight = 'b'
  let g:ansible_extra_keywords_highlight = 1
'''

[[plugins]]
repo     = 'posva/vim-vue'
hook_add = '''
  augroup FileTypeVueIsKeyword
    autocmd!
    autocmd FileType vue setlocal iskeyword+=$ | setlocal iskeyword+=-
  augroup END
'''

[[plugins]]
repo = 'ternjs/tern_for_vim'
hook_add = ''' "{{{
  let g:tern#command = ['tern']
  let g:tern#arguments = ['--persistent']
  augroup TernForVim
    autocmd!
    autocmd FileType javascript nnoremap <buffer> <silent> gd :TernDef<CR>
    autocmd FileType javascript nnoremap <buffer> <silent> <C-]> :TernDef<CR>
    autocmd FileType javascript nnoremap <buffer> <silent> <C-LeftMouse> :TernDef<CR>
    autocmd FileType javascript nnoremap <buffer> <silent> <C-w>] :TernDef<CR>
    autocmd FileType javascript nnoremap <buffer> <silent> <C-w><C-]> :TernDef<CR>
    autocmd FileType javascript nnoremap <buffer> <silent> K :TernType<CR>
  augroup END
"}}} '''
hook_post_update = '''
  !npm install -g tern
'''

[[plugins]]
repo = 'tmux-plugins/vim-tmux'
# }}}

# vim-script {{{
[[plugins]]
repo = 'vim-scripts/HiColors'

[[plugins]]
repo = 'vim-scripts/applescript.vim'

[[plugins]]
repo = 'vim-scripts/autodate.vim'
hook_add = '''let g:autodate_format = '%FT%T%z' '''

[[plugins]]
repo = 'vim-scripts/fontforge_script.vim'

[[plugins]]
repo = 'vim-scripts/nginx.vim'
# }}}

# dependencies {{{
[[plugins]]
repo = 'inkarkat/vim-ingo-library'

[[plugins]]
repo = 'kana/vim-textobj-user'
# }}}

# vim:se fdm=marker:
