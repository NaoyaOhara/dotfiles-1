# Shougowares and their dependencies {{{
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'delphinus/vim-denite-memo'

[[plugins]]
repo = 'fishbullet/deoplete-ruby'

[[plugins]]
repo = 'rafi/vim-denite-z'

[[plugins]]
repo = 'roxma/nvim-yarp'
hook_source = '''
  " Set path for python3 for python37u packages in CentOS7
  if !executable('python3') && executable('python3.7')
    let g:python3_host_prog = exepath('python3.7')
  endif
'''

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'ujihisa/neco-look'

[[plugins]]
repo = 'zchee/deoplete-zsh'
# }}}

# basic {{{
[[plugins]]
repo     = 'airblade/vim-rooter'
hook_add = '''
  let g:rooter_silent_chdir = 1
'''

[[plugins]]
repo     = 'direnv/direnv.vim'
hook_add = '''
  let g:direnv_auto = 0
  augroup ExecDirenv
    autocmd!
    autocmd User RooterChDir call direnv#export()
  augroup END
'''

[[plugins]]
repo     = 'kana/vim-submode'
hook_add = '''
"{{{
  call submode#enter_with('DWM_size', 'n', '', '<C-w>>', ':call DWM_GrowMaster()<CR>')
  call submode#enter_with('DWM_size', 'n', '', '<C-w><', ':call DWM_ShrinkMaster()<CR>')
  call submode#map('DWM_size', 'n', '', '>', ':call DWM_GrowMaster()<CR>')
  call submode#map('DWM_size', 'n', '', '<', ':call DWM_ShrinkMaster()<CR>')
"}}}
'''

[[plugins]]
repo = 'haya14busa/is.vim'

[[plugins]]
repo     = 'ryanoasis/vim-devicons'
hook_add = '''
"{{{
  let g:webdevicons_enable_nerdtree = 0
  let g:WebDevIconsUnicodeByteOrderMarkerDefaultSymbol = ''
  let g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol = ''
  let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {
        \ 'fcgi':     '',
        \ 'perl':     '',
        \ 'sqlite':   '',
        \ 'tt':       '',
        \ 'txt':      '',
        \ }
"}}}
'''

[[plugins]]
repo     = 'tmux-plugins/vim-tmux-focus-events'
if       = '''exists('$TMUX') || ! has('gui_running')'''
hook_add = 'set autoread'

[[plugins]]
repo     = 'tpope/vim-fugitive'
hook_add = '''
"{{{
  let g:fugitive_git_executable = 'git my-alias'
  nnoremap git :<c-u>Git
  nnoremap g<space> :<c-u>Git 
  nnoremap d< :diffget //2<CR>
  nnoremap d> :diffget //3<CR>
  nnoremap gs :Gstatus<CR>
  nnoremap gc :Gbrowse<CR>
  vnoremap gc :Gbrowse<CR>
"}}}
'''

[[plugins]]
repo    = 'tpope/vim-rhubarb'
depends = ['fugitive']
# setting exists in .vimrc-local

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
# }}}

# colorscheme {{{
[[plugins]]
repo     = 'lifepillar/vim-solarized8'
on_if    = '''has('termguicolors')'''
hook_add = '''
"{{{
  let g:solarized_diffmode = 'normal'
  let g:solarized_visibility = 'normal'
  if $TERM =~# 'italic'
    let g:solarized_term_italics = 1
  endif

  function! s:colorscheme_toggle() abort
    if &background ==# 'light'
      set background=dark
      colorscheme solarized8_dark
    else
      set background=light
      colorscheme solarized8_light
    endif
    let path = dein#get('lightline-delphinus').path
    let g:lightline_delphinus_colorscheme = 'solarized_improved'
    execute 'source' path . '/autoload/lightline/colorscheme/solarized_improved.vim'
    unlet g:loaded_lightline_delphinus
    execute 'source' path . '/plugin/lightline_delphinus.vim'

    " https://github.com/itchyny/lightline.vim/issues/241#issuecomment-322033789
    call lightline#init()
    call lightline#colorscheme()
    call lightline#update()
  endfunction

  command! ColorschemeToggle :call delphinus#colorscheme#toggle()
"}}}
'''

[[plugins]]
repo = 'arcticicestudio/nord-vim'
hook_add = '''
  let g:nord_italic = 1
  let g:nord_italic_comments = 1
  let g:nord_underline = 1
  let g:nord_comment_brightness = 20

  augroup nord-overrides
    autocmd!
    autocmd ColorScheme nord highlight Identifier guifg=#8FBCBB guibg=NONE ctermfg=14 ctermbg=NONE
    autocmd ColorScheme nord highlight Special guifg=#D08770 guibg=NONE ctermfg=11 ctermbg=NONE
    autocmd ColorScheme nord highlight IncSearch guifg=#3B4252 guibg=#81A1C1 ctermfg=0 ctermbg=4 gui=bold cterm=bold
  augroup END
'''
# }}}

# syntax {{{
[[plugins]]
repo = 'Glench/Vim-Jinja2-Syntax'

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'

[[plugins]]
repo = 'aklt/plantuml-syntax'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'hail2u/vim-css3-syntax'

[[plugins]]
repo   = 'leafgarland/typescript-vim'
merged = 0

[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = '''
  let g:vim_markdown_folding_style_pythonic = 1
  let g:vim_markdown_new_list_item_indent = 2
  let g:vim_markdown_conceal = 0
'''

[[plugins]]
repo = 'digitaltoad/vim-jade'

[[plugins]]
repo = 'isRuslan/vim-es6'

[[plugins]]
repo = 'kchmck/vim-coffee-script'

[[plugins]]
repo     = 'elzr/vim-json'
if       = '''! has('kaoriya')'''
hook_add = 'let g:vim_json_syntax_conceal = 0'

[[plugins]]
repo = 'motemen/xslate-vim'

[[plugins]]
repo = 'moznion/vim-cpanfile'

[[plugins]]
repo = 'vim-perl/vim-perl'
# }}}

# filetype {{{
[[plugins]]
repo   = 'ap/vim-css-color'
merged = 0

[[plugins]]
repo = 'c9s/perlomni.vim'

[[plugins]]
repo = 'delphinus/vim-rails'
rev  = 'feature/recognize-ridgepole'

[[plugins]]
repo = 'jason0x43/vim-js-indent'

[[plugins]]
repo  = 'pearofducks/ansible-vim'

[[plugins]]
repo     = 'posva/vim-vue'
hook_add = '''
  augroup FileTypeVueIsKeyword
    autocmd!
    autocmd FileType vue setlocal iskeyword+=$ | setlocal iskeyword+=-
  augroup END
'''

[[plugins]]
repo = 'tmux-plugins/vim-tmux'
# }}}

# for lightline {{{
[[plugins]]
repo     = 'delphinus/lightline-delphinus'
depends  = [ 'lightline', 'ale' ]
hook_add = '''
  let g:lightline_delphinus_use_powerline_glyphs = 1
  let g:lightline_delphinus_use_nerd_fonts_glyphs = 1
  let g:lightline_delphinus_colorscheme = 'nord_improved'
'''

[[plugins]]
repo    = 'itchyny/lightline.vim'

[[plugins]]
repo     = 'w0rp/ale'
hook_add = """
  let g:ale_echo_msg_format = '%severity%  %linter% - %s'
  let g:ale_echo_msg_error_str = nr2char(0xf42d) . ' ' " ' '
  let g:ale_echo_msg_warning_str = nr2char(0xf426) . ' ' " ' '
  let g:ale_echo_msg_info_str = nr2char(0xf05a) . ' ' " ' '
  let g:ale_sign_column_always = 1
  let g:ale_sign_error = nr2char(0xf42d) . ' ' " ' '
  let g:ale_sign_warning = nr2char(0xf426) . ' ' " ' '
  let g:ale_statusline_format = [nr2char(0xf42d) . '  %d', nr2char(0xf426) . '  %d', nr2char(0xf4e6) . '  '] " '   '
  let g:ale_linters = {
        \ 'go': [ 'gometalinter' ],
        \ 'typescript': [ 'tslint', 'tsserver' ],
        \ 'perl': [ 'perl' ],
        \ }
  let g:ale_sh_shellcheck_options = '-x'
  let g:ale_go_gometalinter_options = '--fast -E lll -E dupl -E gofmt -E goimports -E misspell'
  let g:ale_python_pylint_change_directory = 0
  if has('nvim')
    nmap <silent> Ë <Plug>(ale_previous_wrap)
    nmap <silent> Ê <Plug>(ale_next_wrap)
  else
    nmap <silent> <A-K> <Plug>(ale_previous_wrap)
    nmap <silent> <A-J> <Plug>(ale_next_wrap)
  endif
"""
# }}}

# vim-script {{{
[[plugins]]
repo = 'vim-scripts/HiColors'

[[plugins]]
repo = 'vim-scripts/applescript.vim'

[[plugins]]
repo = 'vim-scripts/autodate.vim'
if   = '''!has('kaoriya')'''

[[plugins]]
repo = 'vim-scripts/fontforge_script.vim'

[[plugins]]
repo = 'vim-scripts/ingo-library'

[[plugins]]
repo = 'vim-scripts/nginx.vim'
# }}}

# dependencies {{{
[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'lambdalisue/vim-rplugin'
# }}}

# vim:se fdm=marker:
