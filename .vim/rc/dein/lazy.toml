# on_cmd {{{
[[plugins]]
repo       = 'Shougo/defx.nvim'
on_command = ['Defx']

[[plugins]]
repo       = 'Shougo/deol.nvim'
on_command = ['Deol']
hook_add   = '''
"{{{
  let g:deol#enable_dir_changed = 0
  tnoremap <BS><C-n> <C-\><C-n>
  if has('nvim')
    nnoremap <C-\><C-n> :<C-u>Deol -split<CR><C-\><C-n>:silent setlocal nonumber norelativenumber<CR>:startinsert<CR>
    nnoremap <BS><C-n> :<C-u>Deol -split<CR><C-\><C-n>:silent setlocal nonumber norelativenumber<CR>:startinsert<CR>
    " mapping for normal <A-> modifier
    tmap <A-z> <C-\><C-n><Plug>(deol_bg)<C-\><C-n>:silent setlocal nonumber norelativenumber<CR>:startinsert<CR>
    nmap <A-z> <Plug>(deol_bg)<C-\><C-n>:silent setlocal nonumber norelativenumber<CR>:startinsert<CR>
    " mapping for iTerm2 setting `Normal`
    tmap Ω <C-\><C-n><Plug>(deol_bg)<C-\><C-n>:silent setlocal nonumber norelativenumber<CR>:startinsert<CR>
    nmap Ω <Plug>(deol_bg)<C-\><C-n>:silent setlocal nonumber norelativenumber<CR>:startinsert<CR>
    " mapping for iTerm2 setting `Meta`
    tmap ú <C-\><C-n><Plug>(deol_bg)<C-\><C-n>:silent setlocal nonumber norelativenumber<CR>:startinsert<CR>
    nmap ú <Plug>(deol_bg)<C-\><C-n>:silent setlocal nonumber norelativenumber<CR>:startinsert<CR>
  else
    nnoremap <C-\><C-n> :<C-u>Deol -split<CR><C-\><C-n>:silent setlocal nonumber norelativenumber nolist colorcolumn=0<CR>i
    nnoremap <BS><C-n> :<C-u>Deol -split<CR><C-\><C-n>:silent setlocal nonumber norelativenumber nolist colorcolumn=0<CR>i
    " mapping for normal <A-> modifier
    tmap <A-z> <C-\><C-n><Plug>(deol_bg)<C-\><C-n>:silent setlocal nonumber norelativenumber nolist colorcolumn=0<CR>i
    nmap <A-z> <Plug>(deol_bg)<C-\><C-n>:silent setlocal nonumber norelativenumber nolist colorcolumn=0<CR>i
    " mapping for iTerm2 setting `Normal`
    tmap Ω <C-\><C-n><Plug>(deol_bg)<C-\><C-n>:silent setlocal nonumber norelativenumber nolist colorcolumn=0<CR>i
    nmap Ω <Plug>(deol_bg)<C-\><C-n>:silent setlocal nonumber norelativenumber nolist colorcolumn=0<CR>i
    " mapping for iTerm2 setting `Meta`
    tmap ú <C-\><C-n><Plug>(deol_bg)<C-\><C-n>:silent setlocal nonumber norelativenumber nolist colorcolumn=0<CR>i
    nmap ú <Plug>(deol_bg)<C-\><C-n>:silent setlocal nonumber norelativenumber nolist colorcolumn=0<CR>i
  endif
"}}}
'''

[[plugins]]
repo     = 'dhruvasagar/vim-table-mode'
on_cmd   = ['TableModeToggle']
hook_add = '''
  nnoremap `tm :TableModeToggle<CR>
  let g:table_mode_corner='|'
'''

[[plugins]]
repo     = 'edkolev/tmuxline.vim'
on_cmd   = ['Tmuxline', 'TmuxlineSimple', 'TmuxlineSnapshot']
hook_add = '''
"{{{
  let g:tmuxline_preset = {
        \ 'a': '#P',
        \ 'b': '#{window_panes}',
        \ 'c': '#{s|'.expand('~').'|~|:pane_current_path}',
        \ 'win': ['#I', '#W'],
        \ 'cwin': ['#I', '#W'],
        \ 'x': '#(battery.tmux)',
        \ 'y': ['%m/%d (%a)', '%R'],
        \ 'z': '#H',
        \ }
"}}}
'''

[[plugins]]
repo   = 'fuenor/JpFormat.vim'
on_cmd = ['JpFormatAll', 'JpJoinAll']

[[plugins]]
repo     = 'lambdalisue/vim-gista'
on_cmd   = ['Gista']
on_func  = ['gista#']
hook_add = '''
  let g:gista#command#list#enable_default_mappings = 0
  nnoremap gl :<c-u>Gista list<CR>
  nnoremap gL :<c-u>Gista list 
'''
hook_post_source = '''
"{{{
  function! s:gista_mappings() abort
    nmap <buffer> q <Plug>(gista-quit)
    nmap <buffer> <C-n> <Plug>(gista-next-mode)
    nmap <buffer> <C-p> <Plug>(gista-prev-mode)
    nmap <buffer> ? <Plug>(gista-toggle-mapping-visibility)
    nmap <buffer> <C-l> <Plug>(gista-redraw)
    "nmap <buffer> <F5>   <Plug>(gista-update)
    "nmap <buffer> <S-F5> <Plug>(gista-UPDATE)
    nmap <buffer> uu   <Plug>(gista-update)
    nmap <buffer> UU <Plug>(gista-UPDATE)
    map <buffer> <Return> <Plug>(gista-edit)
    map <buffer> ee <Plug>(gista-edit)
    map <buffer> EE <Plug>(gista-edit-right)
    map <buffer> tt <Plug>(gista-edit-tab)
    map <buffer> pp <Plug>(gista-edit-preview)
    map <buffer> ej <Plug>(gista-json)
    map <buffer> EJ <Plug>(gista-json-right)
    map <buffer> tj <Plug>(gista-json-tab)
    map <buffer> pj <Plug>(gista-json-preview)
    map <buffer> bb <Plug>(gista-browse-open)
    map <buffer> yy <Plug>(gista-browse-yank)
    map <buffer> rr <Plug>(gista-rename)
    map <buffer> RR <Plug>(gista-RENAME)
    map <buffer> df <Plug>(gista-remove)
    map <buffer> DF <Plug>(gista-REMOVE)
    map <buffer> dd <Plug>(gista-delete)
    map <buffer> DD <Plug>(gista-DELETE)
    map <buffer> ++ <Plug>(gista-star)
    map <buffer> -- <Plug>(gista-unstar)
    map <buffer> ff <Plug>(gista-fork)
    map <buffer> cc <Plug>(gista-commits)
  endfunction

  let apinames = gista#client#get_available_apinames()
  if index(apinames, 'GHE') == -1 && exists('g:gista_github_api_path')
    call gista#client#register('GHT', g:gista_github_api_path)
  endif
  autocmd User GistaList call <SID>gista_mappings()
"}}}
'''

[[plugins]]
repo   = 'powerman/vim-plugin-AnsiEsc'
on_cmd = ['AnsiEsc']

[[plugins]]
repo   = 'rhysd/ghpr-blame.vim'
on_cmd = ['GHPRBlame']
hook_source = '''
  source ~/.init-ghprblame.vim
  let g:ghpr_show_pr_mapping = 'ð'
  let g:ghpr_show_pr_in_message = 1
'''

[[plugins]]
repo        = 'thinca/vim-fontzoom'
on_cmd      = ['Fontzoom']
on_map      = ['<Plug>(fontzoom-']
if          = '''has('gui')'''
hook_add    = '''
"{{{
  nmap <unique> <silent> + <Plug>(fontzoom-larger)
  nmap <unique> <silent> - <Plug>(fontzoom-smaller)
  nmap <unique> <silent> <C-ScrollWheelUp> <Plug>(fontzoom-larger)
  nmap <unique> <silent> <C-ScrollWheelDown> <Plug>(fontzoom-smaller)
"}}}
'''
hook_source = '''
"{{{
  let g:fontzoom_no_default_key_mappings=1
"}}}
'''

[[plugins]]
repo      = 'thinca/vim-prettyprint'
on_cmd    = ['PP', 'PrettyPrint']
on_source = ['capture.vim']

[[plugins]]
repo   = 'tyru/capture.vim'
on_cmd = ['Capture']

[[plugins]]
repo     = 'tyru/open-browser.vim'
on_cmd   = ['OpenBrowser', 'OpenBrowserSearch']
on_func  = ['openbrowser#open']
on_map   = ['<Plug>(openbrowser-']
hook_add = '''
  nmap g<CR> <Plug>(openbrowser-smart-search)
  vmap g<CR> <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo   = 'tweekmonster/startuptime.vim'
on_cmd = ['StartupTime']

[[plugins]]
repo   = 'vifm/vifm.vim'
on_cmd = ['EditVifm', 'VsplitVifm', 'SplitVifm', 'DiffVifm', 'TabVifm']
on_ft  = ['vifm']

# vim:se fdm=marker:
# }}}

# on_event {{{
[[plugins]]
repo             = 'airblade/vim-gitgutter'
on_event         = ['FocusLost', 'CursorHold']
hook_source      = '''
"{{{
  let g:gitgutter_diff_args='-w --indent-heuristic'
  let g:gitgutter_highlight_lines = 1
  let g:gitgutter_sign_added='✓'
  let g:gitgutter_sign_modified='⤷'
  let g:gitgutter_sign_removed='✗'
  let g:gitgutter_sign_removed_first_line='↑'
  let g:gitgutter_sign_modified_removed='•'
"}}}
'''
hook_post_source = '''
"{{{
  if &background ==# 'light'
    hi GitGutterAddLine ctermbg=192 guibg=#f0f9e2
    hi GitGutterChangeLine ctermbg=230 guibg=#fff4c9
    hi GitGutterDeleteLine ctermbg=224 guibg=#ffe9ef
  elseif g:colors_name ==# 'nord'
    hi GitGutterAdd ctermfg=2 guifg=#a3be8c ctermbg=NONE guibg=NONE
    hi GitGutterChange ctermfg=3 guifg=#ebcb8b ctermbg=NONE guibg=NONE
    hi GitGutterChangeDelete ctermfg=5 guifg=#b48ead ctermbg=NONE guibg=NONE
    hi GitGutterDelete ctermfg=1 guifg=#bf616a ctermbg=NONE guibg=NONE
    hi link GitGutterAddLine GitGutterAdd
    hi link GitGutterChangeLine GitGutterChange
    hi link GitGutterChangeDeleteLine GitGutterChangeDelete
    hi link GitGutterDeleteLine GitGutterDelete
  else
    hi GitGutterAddLine ctermbg=233 guibg=#122b0c
    hi GitGutterChangeLine ctermbg=236 guibg=#342e0e
    hi GitGutterDeleteLine ctermbg=235 guibg=#4e2728
  endif
"}}}
'''

[[plugins]]
repo     = 'delphinus/vim-emacscommandline'
on_event = ['FocusLost', 'CursorHold']

[[plugins]]
repo     = 'delphinus/vim-unimpaired'
on_event = ['FocusLost', 'CursorHold']

[[plugins]]
repo     = 'itchyny/vim-cursorword'
on_event = ['FocusLost', 'CursorHold']

[[plugins]]
repo             = 'itchyny/vim-parenmatch'
on_event         = ['FocusLost', 'CursorHold']
hook_add         = 'let g:loaded_matchparen = 1'
hook_post_source = 'call parenmatch#highlight()'

[[plugins]]
repo     = 'thinca/vim-visualstar'
on_event = ['FocusLost', 'CursorHold']
# }}}

# on_ft {{{
[[plugins]]
repo        = 'Chiel92/vim-autoformat'
on_ft       = ['typescript', 'javascript']
hook_add    = '''
let g:autoformat_autoindent = 0
let g:autoformat_retab = 0
let g:autoformat_remove_trailing_spaces = 0
'''
hook_source = '''
"{{{
  augroup VimAutoformat
    autocmd!
    autocmd BufWrite *.ts :Autoformat
    autocmd BufWrite *.js :Autoformat
  augroup END
"}}}
'''

[[plugins]]
repo  = 'davidhalter/jedi-vim'
on_ft = ['python']

[[plugins]]
repo  = 'dsawardekar/wordpress.vim'
on_ft = ['php']

[[plugins]]
repo        = 'fatih/vim-go'
on_ft       = ['go']
hook_source = '''
"{{{
  let g:go_addtags_transform = 'camelcase'
  let g:go_alternate_mode = 'split'
  let g:go_auto_sameids = 0
  let g:go_auto_type_info = 0
  let g:go_autodetect_gopath = 0
  let g:go_def_mapping_enabled = 1
  let g:go_def_mode = 'godef'
  let g:go_fmt_command = 'goimports'
  let g:go_fmt_experimental = 1
  let g:go_fmt_fail_silently = 1
  let g:go_fmt_options = {'gofmt': '-s'}
  let g:go_gocode_unimported_packages = 1
  let g:go_highlight_array_whitespace_error = 1
  let g:go_highlight_build_constraints = 1
  let g:go_highlight_chan_whitespace_error = 1
  let g:go_highlight_extra_types = 1
  let g:go_highlight_fields = 1
  let g:go_highlight_functions = 1
  let g:go_highlight_generate_tags = 1
  let g:go_highlight_methods = 1
  let g:go_highlight_operators = 1
  let g:go_highlight_space_tab_error = 1
  let g:go_highlight_types = 1
  let g:go_info_mode = 'gocode'
  let g:go_metalinter_autosave = 0
  let g:go_metalinter_deadline = '10s'
  let g:go_template_use_pkg = 1
"}}}
'''

[[plugins]]
repo  = 'msanders/cocoa.vim'
on_ft = ['objc']

[[plugins]]
repo    = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']
on_ft   = [
    'c', 'cpp', 'd', 'eruby', 'html', 'int-nyaos', 'lua',
    'nyaos', 'perl6', 'python', 'vim', 'vimperator', 'vimshell', 'xhtml',
    'markdown', 'haml', 'jade', 'toml', 'go', 'asciidoc',
  ]

[[plugins]]
repo    = 'rhysd/vim-textobj-ruby'
depends = ['vim-textobj-user']
on_ft   = ['ruby']

[[plugins]]
repo  = 'rust-lang/rust.vim'
on_ft = ['rust']

[[plugins]]
repo = 'tpope/vim-endwise'
on_ft = [
    'lua', 'elixir', 'ruby', 'crystal', 'sh', 'zsh', 'vb', 'vbnet',
    'aspvbs', 'vim', 'c', 'cpp', 'xdefaults', 'objc', 'matlab',
  ]
# }}}

# on_map {{{
[[plugins]]
repo     = 'LeafCage/yankround.vim'
on_map   = ['<Plug>(yankround-']
hook_add = '''
"{{{
  nmap p <Plug>(yankround-p)
  xmap p <Plug>(yankround-p)
  nmap P <Plug>(yankround-P)
  nmap gp <Plug>(yankround-gp)
  xmap gp <Plug>(yankround-gp)
  nmap gP <Plug>(yankround-gP)
  nmap <c-p> <Plug>(yankround-prev)
  nmap <expr><c-n> yankround#is_active() ? "\<Plug>(yankround-next)" : "\<Plug>DWMNew"
"}}}
'''

[[plugins]]
repo     = 'arecarn/vim-fold-cycle'
on_map   = ['<Plug>(fold-cycle-']
hook_add = '''
"{{{
  nmap <CR> <Plug>(fold-cycle-open)
  nmap <C-h> <Plug>(fold-cycle-close)
"}}}
'''

[[plugins]]
repo     = 'chikatoike/concealedyank.vim'
on_map   = ['<Plug>(operator-concealedyank)']
hook_add = 'xmap Y <Plug>(operator-concealedyank)'

[[plugins]]
repo      = 'delphinus/dwm.vim'
rev       = 'feature/disable-in-denite'
on_map    = ['<Plug>DWM']
hook_add  = '''
"{{{
  function! s:dwm_reset_pane_width() abort
    if !exists('*DWM_ResizeMasterPaneWidth')
      return
    endif
    let half = &columns / 2
    let min_width = get(g:, 'dwm_min_master_pane_width', 9999)
    let g:dwm_master_pane_width = min([min_width, half])
    call DWM_ResizeMasterPaneWidth()
  endfunction

  function! s:dwm_disable() abort
    autocmd! dwm BufWinEnter
    augroup! dwm
  endfunction

  function! s:dwm_enable() abort
    augroup dwm
      autocmd!
      autocmd! BufWinEnter * if &buflisted || &filetype ==# 'help' | call DWM_AutoEnter() | endif
    augroup END
  endfunction

  let g:dwm_min_master_pane_width = 86

  nnoremap <C-J> <C-W>w
  nnoremap <C-K> <C-W>W
  nmap <C-S> <Plug>DWMRotateClockwise
  nmap <C-Q> <Plug>DWMRotateCounterclockwise
  nmap <C-N> <Plug>DWMNew
  nmap <C-C> <Plug>DWMClose
  nmap <C-Space> <Plug>DWMFocus
  nmap <C-@> <Plug>DWMFocus
  nmap <C-L> <Plug>DWMGrowMaster

  command! DWMResetPaneWidth call <SID>dwm_reset_pane_width()
  command! DWMDisable call <SID>dwm_disable()
  command! DWMEnable call <SID>dwm_enable()
"}}}
'''

[[plugins]]
repo     = 'iamcco/markdown-preview.vim'
on_map   = ['<Plug>MarkdownPreview', '<Plug>StopMarkdownPreview']
hook_add = '''
  augroup MapMarkdownPreview
    autocmd!
    autocmd FileType markdown nmap <buffer> <A-m> <Plug>MarkdownPreview
    autocmd FileType markdown nmap <buffer> <A-M> <Plug>StopMarkdownPreview
  augroup END
'''
hook_source = '''
  let g:mkdp_path_to_chrome = 'open -a Safari'
'''

[[plugins]]
repo        = 'junegunn/vim-easy-align'
on_map      = ['<Plug>(EasyAlign)', '<Plug>(LiveEasyAlign)']
hook_add    = '''
"{{{
  vmap <Enter>           <Plug>(EasyAlign)
  nmap <Leader>a         <Plug>(EasyAlign)
  vmap <Leader><Enter>   <Plug>(LiveEasyAlign)
  nmap <Leader><Leader>a <Plug>(LiveEasyAlign)
"}}}
'''
hook_source = '''
"{{{
  let g:easy_align_delimiters = {
        \ '>': { 'pattern': '>>\|=>\|>' },
        \ '/': { 'pattern': '//\+\|/\*\|\*/', 'ignore_groups': ['String'] },
        \ '#': { 'pattern': '#\+', 'ignore_groups': ['String'], 'delimiter_align': 'l' },
        \ ']': {
        \     'pattern':       '[[\]]',
        \     'left_margin':   0,
        \     'right_margin':  0,
        \     'stick_to_left': 0
        \   },
        \ ')': {
        \     'pattern':       '[()]',
        \     'left_margin':   0,
        \     'right_margin':  0,
        \     'stick_to_left': 0
        \   },
        \ 'd': {
        \     'pattern': ' \(\S\+\s*[;=]\)\@=',
        \     'left_margin': 0,
        \     'right_margin': 0
        \   }
        \ }
"}}}
'''

[[plugins]]
repo     = 't9md/vim-quickhl'
on_map   = ['<Plug>(quickhl-', '<Plug>(operator-quickhl-']
hook_add = '''
"{{{
  nmap <Space>m <Plug>(quickhl-manual-this)
  xmap <Space>m <Plug>(quickhl-manual-this)
  nmap <Space>t <Plug>(quickhl-manual-toggle)
  xmap <Space>t <Plug>(quickhl-manual-toggle)
  nmap <Space>M <Plug>(quickhl-manual-reset)
  xmap <Space>M <Plug>(quickhl-manual-reset)
  nmap <Space>j <Plug>(quickhl-cword-toggle)
  nmap <Space>] <Plug>(quickhl-tag-toggle)
  map  <Space>H <Plug>(operator-quickhl-manual-this-motion)
"}}}
'''

[[plugins]]
repo     = 't9md/vim-choosewin'
on_map   = ['<Plug>(choosewin)']
hook_add = '''
  nmap \ <Plug>(choosewin)
  let g:choosewin_statusline_replace=0
  let g:choosewin_overlay_enable=1
'''

[[plugins]]
repo        = 'easymotion/vim-easymotion'
on_map      = ['<Plug>(easymotion-']
hook_add    = '''
"{{{
  map ' <Plug>(easymotion-prefix)
  nmap s <Plug>(easymotion-overwin-f2)
  xmap s <Plug>(easymotion-s2)
  omap s <Plug>(easymotion-s2)
  nmap 'f <Plug>(easymotion-fl)
  xmap 'f <Plug>(easymotion-fl)
  omap 'f <Plug>(easymotion-fl)
  nmap 'F <Plug>(easymotion-Fl)
  xmap 'F <Plug>(easymotion-Fl)
  omap 'F <Plug>(easymotion-Fl)
  map  '/ <Plug>(easymotion-sn)
  omap '/ <Plug>(easymotion-tn)
  map  'n <Plug>(easymotion-next)
  map  'N <Plug>(easymotion-prev)
  map  'L <Plug>(easymotion-bd-jk)
  nmap 'L <Plug>(easymotion-overwin-line)
"}}}
'''
hook_source = '''
"{{{
  " 使う文字
  let g:EasyMotion_keys = 'hjklasdfgyuiopqwertnmzxcvbHJKLASDFGYUIOPQWERTNMZXCVB'
  " 1 ストローク選択を優先する
  let g:EasyMotion_grouping =1
  " 日本語検索
  let g:EasyMotion_use_migemo = 1
  " Space か Enter を押すと最初のマッチに飛ぶ
  let g:EasyMotion_enter_jump_first = 1
  let g:EasyMotion_space_jump_first = 1
"}}}
'''

[[plugins]]
repo    = 'vim-scripts/LineJuggler'
depends = [
  'vim-repeat',
  'ingo-library',
  'visualrepeat',
]
on_map   = ['<Plug>(LineJuggler']
hook_add = '''
"{{{
  xmap [d       <Plug>(LineJugglerDupOverUp)
  nmap [d       <Plug>(LineJugglerDupOverUp)
  xmap [E       <Plug>(LineJugglerSwapUp)
  nmap [E       <Plug>(LineJugglerSwapUp)
  xmap [e       <Plug>(LineJugglerMoveUp)
  nmap [e       <Plug>(LineJugglerMoveUp)
  xmap [<Space> <Plug>(LineJugglerBlankUp)
  nmap [<Space> <Plug>(LineJugglerBlankUp)
  xmap ]d       <Plug>(LineJugglerDupOverDown)
  nmap ]d       <Plug>(LineJugglerDupOverDown)
  xmap ]E       <Plug>(LineJugglerSwapDown)
  nmap ]E       <Plug>(LineJugglerSwapDown)
  xmap ]e       <Plug>(LineJugglerMoveDown)
  nmap ]e       <Plug>(LineJugglerMoveDown)
  xmap ]<Space> <Plug>(LineJugglerBlankDown)
  nmap ]<Space> <Plug>(LineJugglerBlankDown)
"}}}
'''
# }}}

# dependencies {{{
[[plugins]]
repo = 'vim-jp/vital.vim'
on_func = ['vital#vital#new']

[[plugins]]
repo = 'vim-scripts/visualrepeat'
# }}}

# vim:se fdm=marker:
