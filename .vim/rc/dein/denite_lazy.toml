[[plugins]]
repo     = 'Shougo/denite.nvim'
#repo     = 'delphinus/denite.nvim'
#ev      = 'feature/sorter-abbr'
on_cmd   = ['Denite', 'DeniteBufferDir', 'DeniteCursorWord']
on_func  = ['denite#']
depends  = ['dwm.vim']
hook_add = '''
"{{{
  function! s:my_denite_outline(filetype) abort
    execute 'Denite' a:filetype ==# 'go' ? "decls:'%:p'" : 'outline'
  endfunction

  function! s:my_denite_decls(filetype) abort
    if a:filetype ==# 'go'
      Denite decls
    else
      call denite#util#print_error('decls does not support filetypes except go')
    endif
  endfunction

  function! s:my_denite_file_rec_goroot() abort
    if !executable('go')
      call denite#util#print_error('`go` executable not found')
      return
    endif
    let out = system('go env | grep ''^GOROOT='' | cut -d\" -f2')
    let goroot = substitute(out, '\n', '', '')
    call denite#start(
          \ [{'name': 'my_file_rec', 'args': [goroot]}],
          \ {'input': '.go'})
  endfunction

  function! s:my_denite_with_pwd(action) abort
    let pwd = get(b:, '__pwd__', '')
    if a:action ==# 'grep'
      call denite#start([{'name': 'grep', 'args': [pwd, '', '!']}])
    elseif a:action ==# 'my_file_rec'
      call denite#start([{'name': 'my_file_rec', 'args': [pwd]}])
    else
      call denite#start([{'name': a:action, 'args': ['', pwd]}])
    endif
  endfunction

  noremap zn :<C-u>DeniteBufferDir -expand my_file my_file:new<CR>
  noremap zN :<C-u>Denite npm<CR>
  noremap zl :<C-u>call <SID>my_denite_outline(&filetype)<CR>
  noremap zL :<C-u>call <SID>my_denite_decls(&filetype)<CR>
  noremap za :<C-u>Denite -expand my_file_rec<CR>
  noremap zg :<C-u>Denite grep<CR>
  noremap zG :<C-u>execute 'Denite grep:' . expand('%:h') . '::!'<CR>
  noremap zi :<C-u>Denite gitlog<CR>
  noremap zI :<C-u>Denite gitlog:all<CR>
  noremap z/ :<C-u>DeniteCursorWord grep:.<CR>
  noremap zd :<C-u>Denite -default-action=narrow dein<CR>
  noremap zD :<C-u>Denite dein_log<CR>
  noremap zp :<C-u>Denite -expand my_buffer my_file_old<CR>
  noremap zh :<C-u>Denite ghq<CR>
  noremap zm :<C-u>Denite memo memo:new<CR>
  noremap ze :<C-u>Denite memo/grep::!<CR>
  noremap zU :<C-u>Denite -resume<CR>
  noremap zj :<C-u>Denite -resume -cursor-pos=+1 -immediately<CR>
  noremap zk :<C-u>Denite -resume -cursor-pos=-1 -immediately<CR>
  noremap zT :<C-u>call <SID>my_denite_file_rec_goroot()<CR>
  noremap zZ :<C-u>Denite buffer -input=term:// -immediately<CR>
  noremap zy :<C-u>Denite yankround<CR>
  noremap zY :<C-u>Denite -default-action=delete yankround<CR>
  tnoremap úá         <C-\><C-n>:<C-u>call <SID>my_denite_with_pwd('my_file_rec')<CR>
  tnoremap Ωå         <C-\><C-n>:<C-u>call <SID>my_denite_with_pwd('my_file_rec')<CR>
  tnoremap <A-z><A-a> <C-\><C-n>:<C-u>call <SID>my_denite_with_pwd('my_file_rec')<CR>
  tnoremap Ω˜         <C-\><C-n>:<C-u>call <SID>my_denite_with_pwd('my_file')<CR>
  tnoremap úî         <C-\><C-n>:<C-u>call <SID>my_denite_with_pwd('my_file')<CR>
  tnoremap <A-z><A-n> <C-\><C-n>:<C-u>call <SID>my_denite_with_pwd('my_file')<CR>
  tnoremap Ω©         <C-\><C-n>:<C-u>call <SID>my_denite_with_pwd('grep')<CR>
  tnoremap úç         <C-\><C-n>:<C-u>call <SID>my_denite_with_pwd('grep')<CR>
  tnoremap <A-z><A-g> <C-\><C-n>:<C-u>call <SID>my_denite_with_pwd('grep')<CR>
  nnoremap Ωπ         :<C-u>Denite -expand my_buffer my_file_old<CR>
  nnoremap úð         :<C-u>Denite -expand my_buffer my_file_old<CR>
  nnoremap <A-z><A-p> :<C-u>Denite -expand my_buffer my_file_old<CR>
  nnoremap Ω˜         :<C-u>call <SID>my_denite_with_pwd('my_file')<CR>
  nnoremap úî         :<C-u>call <SID>my_denite_with_pwd('my_file')<CR>
  nnoremap <A-z><A-n> :<C-u>call <SID>my_denite_with_pwd('my_file')<CR>
  nnoremap Ω©         :<C-u>call <SID>my_denite_with_pwd('grep')<CR>
  nnoremap úç         :<C-u>call <SID>my_denite_with_pwd('grep')<CR>
  nnoremap <A-z><A-g> :<C-u>call <SID>my_denite_with_pwd('grep')<CR>
  nnoremap #  :<C-u>Denite line<CR>
  nnoremap g# :<C-u>Denite line:buffers<CR>
"}}}
'''
hook_source = '''
"{{{
  function! s:dwm_new(context)
    call DWM_New()
    call denite#do_action(a:context, 'open', a:context['targets'])
  endfunction

  function! s:start_action_for_path(context, action, ...)
    let target = a:context['targets'][0]
    let path = get(target, 'action__path', '')
    if isdirectory(path)
      if a:action ==# 'grep'
        call denite#start([{'name': 'grep', 'args': [path, '', '!']}])
      else
        call denite#start([{'name': a:action, 'args': [path]}])
      endif
    else
      call denite#util#print_error('unknown path for target: ' . target))
    endif
  endfunction

  function! s:narrow_grep(context, ...) abort
    let sources = get(a:context, 'sources', [])
    let filtered = filter(copy(sources),
          \ {i, v -> get(v, 'name', '') ==# 'grep'})
    if len(filtered) == 0
      call denite#util#print_error('current sources does not include `grep`.')
      return
    endif
    let args = get(filtered[0], 'args', [])
    " TODO: add feature to know is_interactive in context
    "let pattern = get(args, 2, '')
    "if pattern !=# '!'
      "call denite#util#print_error('current grep source is not interactive')
      "return
    "endif
    let path = get(args, 0, '')
    let opt = get(args, 1, '')
    let input = get(a:context, 'input', '')
    let pattern = substitute(input, '\s\+', '.*', 'g')
    call denite#start([{'name': 'grep', 'args': [path, opt, pattern]}])
  endfunction

  function! Denite_toggle_sorter(sorter) abort
    let sorters = split(b:denite_context.sorters, ',')
    let i = index(sorters, a:sorter)
    if i < 0
      call add(sorters, a:sorter)
    else
      call remove(sorters, i)
    endif
    let b:denite_new_context = {}
    let b:denite_new_context.sorters = join(sorters, ',')
    return '<denite:nop>'
  endfunction

  " Use pt for searching files
  call denite#custom#var('grep', 'command', ['pt'])
  call denite#custom#var('grep', 'default_opts',
        \ ['--nogroup', '--nocolor', '--smart-case', '--ignore=.git', '--ignore=dist', '--ignore=node_modules'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'pattern_opt', [])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'final_opts', [])
  call denite#custom#var('my_file_rec', 'command',
        \ ['pt', '--follow', '--nocolor', '--nogroup',
        \   '--ignore=.git', '-g', ''])

  call denite#custom#action('file', 'dwm_new', function('s:dwm_new'))
  call denite#custom#action('buffer', 'dwm_new', function('s:dwm_new'))
  call denite#custom#action('memo', 'dwm_new', function('s:dwm_new'))
  call denite#custom#action('directory', 'my_file_rec',
        \ {ctx -> s:start_action_for_path(ctx, 'my_file_rec')})
  call denite#custom#action('directory', 'grep',
        \ {ctx -> s:start_action_for_path(ctx, 'grep')})
  call denite#custom#action('file', 'grep', function('s:narrow_grep'))
  call denite#custom#map('insert', '<BS>', '<denite:move_up_path>')
  call denite#custom#map('insert', '<C-a>', '<denite:do_action:my_file_rec>')
  call denite#custom#map('insert', '<C-f>',
        \ 'Denite_toggle_sorter("sorter_abbr")', 'noremap expr nowait')
  call denite#custom#map('insert', '<C-g>', '<denite:do_action:grep>')
  call denite#custom#map('insert', '<C-j>',
        \ '<denite:move_to_next_line>', 'noremap')
  call denite#custom#map('insert', '<C-k>',
        \ '<denite:move_to_previous_line>', 'noremap')
  call denite#custom#map('insert', '<C-n>', '<denite:do_action:dwm_new>')
  call denite#custom#map('insert', '<C-t>',
        \ '<denite:input_command_line>', 'noremap')
  call denite#custom#map('insert', '<Esc>', '<denite:enter_mode:normal>')
  call denite#custom#source('_', 'matchers', ['matcher/substring'])
  call denite#custom#source('grep', 'args', ['', '', '!'])
  call denite#custom#source('grep', 'sorters', ['sorter_abbr'])
  call denite#custom#source('grep', 'converters', ['converter_abbr_word'])
  " ref. https://github.com/arcticicestudio/nord-vim/issues/79
  call denite#custom#option('default', {
        \ 'prompt': '❯❯❯',
        \ 'statusline': v:false,
        \ 'highlight_matched_char': 'Underlined',
        \ 'cursor_shape': v:true,
        \ 'cursor_wrap': v:true,
        \ })
  call denite#custom#option('dein', 'default_action', 'narrow')
"}}}
'''

[[plugins]]
repo      = 'Shougo/neomru.vim'
on_source = ['denite.nvim']

[[plugins]]
repo      = 'Jagua/vim-denite-ghq'
on_source = ['denite.nvim']

[[plugins]]
repo      = 'delphinus/my-denite-sources'
on_source = ['denite.nvim']

[[plugins]]
repo      = 'neoclide/denite-git'
on_source = ['denite.nvim', 'my-denite-sources']
depends   = ['vim-easygit']

[[plugins]]
repo      = 'neoclide/npm.nvim'
on_source = ['denite.nvim']
hook_source = '''
  let npm_py = 'rplugin/python3/denite/kind/npm.py'
  let npm_nvim_npm_py = g:dein#plugin.path . '/' . npm_py
  let denite = g:dein#_plugins['denite.nvim'].path
  let denite_npm_py = denite . '/' . npm_py
  if !filereadable(denite_npm_py)
    execute '!cp ' . npm_nvim_npm_py . ' ' . denite_npm_py
  endif
'''
hook_post_update = '''
  !npm install
'''

[[plugins]]
repo = 'neoclide/vim-easygit'
