scriptencoding 'utf-8'

" メニューを読み込まない
set guioptions+=M

let g:is_vm = isdirectory('/mnt/hgfs')
let g:is_remora_cx = hostname() == 'remora'
let g:is_remora = hostname() =~ '^remora'
let g:is_remora_air2 = hostname() =~ '^remora-air2'
let g:is_remora_office = hostname() == 'remora-office'
let g:is_backup = hostname() =~ 'orcinus.remora.cx'
let g:is_office = hostname() !~ 'remora' && len($H) > 0 && has('unix')
let g:is_office_win = len($USERDOMAIN) && has('win32')
let g:is_office_cygwin = len($USERDOMAIN) && has('win32unix')
let g:is_office_alt = is_office && $VIM_ENV_ALT
let g:is_xerxes = hostname() == 'xerxes' && has('win32')
let g:is_xerxes_cygwin = hostname() == 'xerxes' && has('win32unix')
let g:is_remora_air2_win = hostname() == 'remora-air2-win'
let g:is_unix = is_remora || is_backup || is_office || is_office_cygwin
let g:is_win = has('win32') || has('win64')

if is_remora || is_office_cygwin || is_backup
    let g:home = expand('~')
elseif is_office
    let g:home = expand('$H')
elseif is_win
    let g:home = expand('$HOME')
else
    finish
endif

let g:vim_home = g:home . (g:is_win ? '/vimfiles' : '/.vim')
let g:source_dir = g:vim_home . '/rc'

function s:load_rc(file)
    execute 'source ' . g:source_dir . '/' . a:file . '.vim'
endfunction

function s:load_bundle_rc(bundle_name)
    let bundle = neobundle#get(a:bundle_name)
    function! bundle.hooks.on_source(bundle)
        call s:load_rc(a:bundle_name)
    endfunction
endfunction

call s:load_rc('neobundle')           " プラグインの読み込み
call s:load_rc('map')                 " マッピング
call s:load_rc('set')                 " オプション設定
call s:load_rc('term')                " ターミナル固有の設定
call s:load_rc('functions')           " ユーティリティ関数
call s:load_rc('color')               " OSC を使って色を得る

call s:load_rc('qfixhowm')            " QFixMemo 設定
call s:load_rc('quickrun')            " QuickRun 設定
call s:load_rc('perl')                " Perl 設定
call s:load_rc('ref')                 " Ref 設定
call s:load_rc('netrw')               " Netrw 設定
call s:load_rc('unite')               " Unite 設定
call s:load_rc('vimfiler')            " VimFiler 設定
call s:load_rc('vimshell')            " VimShell 設定
call s:load_rc('powerline')           " Powerline 設定
call s:load_rc('jpformat')            " JpFormat 設定
call s:load_rc('tweetvim')            " TweetVim 設定
call s:load_rc('chalice')             " Chalice 設定
call s:load_rc('easymotion')          " EasyMotion 設定
call s:load_rc('cmdline-completion')  " cmdline-completion 設定
call s:load_rc('csv')                 " CSV 設定
call s:load_rc('rooter')              " vim-rooter 設定
call s:load_rc('title')               " screen title 設定
call s:load_rc('fugitive')            " fugitive 設定
call s:load_rc('colorizer')           " Colorizer 設定
call s:load_rc('watchdogs')           " watchdogs 設定
call s:load_rc('dwm')                 " dwm.vim 設定
call s:load_rc('javascript')          " javascript 設定
call s:load_rc('easyalign')           " EasyAlign 設定
call s:load_rc('gitgutter')           " gitgutter 設定
call s:load_rc('verticalhelp')        " VerticalHelp 設定
call s:load_rc('pb')                  " pb.vim 設定
call s:load_rc('neocomplete')         " neocomplete 設定
call s:load_rc('quickhl')             " quickhl 設定
call s:load_rc('choosewin')           " choosewin 設定
call s:load_rc('yankround')           " choosewin 設定
call s:load_rc('increment-activator') " increment-activator 設定
call s:load_rc('sunset')              " sunset 設定

if has('macunix')
    call s:load_rc('itunes')         " vim-itunes 設定
endif

" オフィス専用設定
let g:office_vimrc = g:home . '/git/dotfiles-office/.vimrc'
if (is_remora_office || is_office) && filereadable(g:office_vimrc)
    execute 'source ' . g:office_vimrc
endif

" ローカル設定
let g:local_vimrc = g:home . '/conf/.vimrc'
if filereadable(g:local_vimrc)
    execute 'source ' . g:local_vimrc
endif
