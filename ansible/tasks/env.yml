---
- homebrew:     name=python  state=absent # uninstall unneeded python2
  when:         ansible_system == 'Darwin'
- homebrew:     name=python3 state=absent # uninstall unneeded python3
  when:         ansible_system == 'Darwin'
- command:      pyenv -v
  register:     py_v
  failed_when:  false
  changed_when: false
- command:      pyenv versions
  register:     py_versions
  changed_when: false
  failed_when:  false
  when:         py_v | success
- command:      pyenv install {{ python2_version }}
  when:         py_v | success and py_versions.stdout.find(python2_version) == -1
- command:      pyenv install {{ python3_version }}
  when:         py_v | success and py_versions.stdout.find(python3_version) == -1

  # easy_install of <= 10.9 version have no '--user' option
- command:      pyenv global system
  changed_when: false
  when:         py_v | success and ansible_system == 'Darwin'
- command:      python -c 'import sys;import site;sys.stdout.write(site.USER_SITE)'
  register:     py_user_site
  changed_when: false
- command:      python -c 'import sys;import site;sys.stdout.write(site.USER_BASE)'
  register:     py_user_base
  changed_when: false
- file:         path={{ py_user_site.stdout }} state=directory
- stat:         path="{{ py_user_base.stdout }}/bin/pip"
  register:     pip_st
- shell: >-
    easy_install
    --install-dir {{ py_user_site.stdout }}
    --script-dir {{ py_user_base.stdout }}/bin
    pip
  when:         not pip_st.stat.exists
  register:     pip_install
  changed_when: pip_install.stdout.find('Successfully installed') > -1
- shell:        "{{ py_user_base.stdout }}/bin/pip install -U --user {{ item }}"
  changed_when: false
  with_items:   python_modules
  when:         lookup('env', 'NO_PYTHON_MODULES') != '1'
- shell:        "{{ py_user_base.stdout }}/bin/pip install -U --user {{ item }}"
  changed_when: false
  with_items:   python_modules_with_compiling
  when:         lookup('env', 'NO_PYTHON_MODULES') != '1' and ansible_system == 'Darwin'

- command:      rbenv -v
  register:     rb_v
  failed_when:  false
  changed_when: false
- command:      rbenv versions
  register:     rb_versions
  failed_when:  false
  changed_when: false
  when:         rb_v | success
- command:      rbenv install {{ ruby_version }}
  when:         rb_v | success and rb_versions.stdout.find(ruby_version) == -1
- gem: >-
    name=git-commit-autouser
    state=latest
  when:         rb_v | success and lookup('env', 'NO_GEMS') != '1'

- command:      plenv -v
  register:     pl_v
  failed_when:  false
  changed_when: false
- command:      plenv versions
  register:     pl_versions
  failed_when:  false
  changed_when: false
  when:         pl_v | success
- command:      plenv install {{ perl_version }}
  when:         pl_v | success and pl_versions.stdout.find(perl_version) == -1
