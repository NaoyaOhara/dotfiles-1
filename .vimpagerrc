scriptencoding utf-8

let g:is_remora_cx = hostname() == 'remora'
let g:is_remora = hostname() =~ '^remora'
let g:is_backup = hostname() == 'backup.remora.cx'
let g:is_office = len($H) > 0 && has('unix')
let g:is_office_win = len($USERDOMAIN) && has('win32')
let g:is_office_cygwin = len($USERDOMAIN) && has('win32unix')
let g:is_office_alt = is_office && $VIM_ENV_ALT
let g:is_xerxes = hostname() == 'xerxes'
let g:is_remora_air2_win = hostname() == 'remora-air2-win'
let g:is_unix = is_remora || is_backup || is_office || is_office_cygwin
let g:is_win = is_office_win || is_xerxes || is_remora_air2_win

if is_remora || is_office_cygwin || is_backup
    let g:home = expand('~')
elseif is_office
    let g:home = expand('$H')
elseif is_win
    let g:home = expand('$HOME')
else
    finish
endif

let g:vim_home = g:home . '/.vim'

" シェルの位置を元に戻す
if is_office
    set shell=/bin/sh
elseif is_office_win
    set shell=$SYSTEMROOT\system32\cmd.exe
endif

" NeoBundle 設定開始
set nocompatible

" プラグイン保存パス
let g:bundle_dir = g:home . '/.vim/bundle'
let g:neobundle_dir = g:bundle_dir . '/neobundle.vim'

" デフォルトプロトコル
let g:neobundle#types#git#default_protocol=g:is_office ? 'ssh' : 'https'

" NeoBundle へのパス
if has('vim_starting')
    if is_office
        set runtimepath-=$HOME/.vim
    endif
    execute 'set runtimepath+=' . g:neobundle_dir . '/'
endif

call neobundle#rc(expand(g:bundle_dir))

" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'

" Set vimproc
NeoBundle 'Shougo/vimproc', {'build': {
    \   'cygwin': 'make -f make_cygwin.mak',
    \   'mac': 'make -f make_mac.mak',
    \   'unix': 'make -f make_unix.mak',
    \   },
    \ }

NeoBundle 'rkitover/vimpager'

NeoBundle 'airblade/vim-rooter'
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'houtsnip/vim-emacscommandline'
NeoBundle 'majutsushi/tagbar'
NeoBundle 'thinca/vim-visualstar'
NeoBundle 'tpope/vim-fugitive'

if has('vim_starting')
    if is_remora || is_office_win || is_office_cygwin
        set runtimepath+=~/.vim/
    elseif is_office
        set runtimepath^=$H/.vim/
    endif
endif

filetype plugin indent on
syntax on
NeoBundleCheck

let mapleader='`'

colo solarized

nnoremap <C-D> 3<C-D>
nnoremap <C-U> 3<C-U>
nmap <ESC><ESC> ;nohlsearch<CR><ESC>
noremap ; :
noremap : ;
map * <Plug>(visualstar-*)N
map # <Plug>(visualstar-#)N

set t_Co=256
set encoding=utf-8
set termencoding=utf-8
set hls
set fileencodings=ucs-bom,utf-8,eucjp,cp932,ucs-2le,latin1,iso-2022-jp
set dir=/tmp
if is_office
    set backupdir=$H/tmp
    set undodir=$H/tmp
else
    set backupdir=/tmp
    set undodir=/tmp
endif
set ttymouse=xterm2
set mouse=a
set display=lastline,uhex
set cursorline
set clipboard=autoselectml
set grepprg=ack
set diffopt=filler,vertical
set synmaxcol=0
set title
set titleold=bash
set titlestring=%t%(\ %M%)%(\ (%{expand(\"%:~:.:h\")})%)%(\ %a%)
set ambiwidth=double
set list                 " 空白の可視化
set listchars=tab:░\ ,trail:░,eol:↲,extends:»,precedes:«,nbsp:¯
set tabstop=4       " 画面上でタブ文字が占める幅
set softtabstop=4   " タブキーやバックスペースキーでカーソルが動く幅
set shiftwidth=4    " 自動インデントや <<, >> でずれる幅
set laststatus=0
set background=dark


"-----------------------------------------------------------------------------
" ヘルプ
function! s:VertHelp(word)
  exec 'vertical help ' . a:word
  exec 'vertical resize 80'
  exec 'setl wfw'
endfunction
command! -nargs=? H call s:VertHelp(<f-args>)
autocmd FileType help nnoremap <buffer>q :q<CR>

"-----------------------------------------------------------------------------
" Teamplte::Toolkit 設定
au BufNewFile,BufRead *.tt2 setf tt2html
au BufNewFile,BufRead *.tt setf tt2html

"-----------------------------------------------------------------------------
" pentadactylrc 設定
au BufNewFile,BufRead .pentadactylrc setf pentadactyl

"-----------------------------------------------------------------------------
" yank to remote clipboard
if is_unix
    let s:tmpdir = &backupdir
    let s:home = is_office ? expand('$H') : expand('$HOME')
    let g:y2r_config = {
    \    'tmp_file': s:tmpdir . '/exchange-file',
    \    'key_file' : s:home . '/.exchange.key',
    \    'host' : 'localhost',
    \    'port' : 52224,
    \}

    function! Yank2Remote()
        call writefile(split(@", '\n'), g:y2r_config.tmp_file, 'b')
        let s:params = ['cat %s %s | nc -w1 %s %s']
        for s:item in ['key_file', 'tmp_file', 'host', 'port']
        let s:params += [shellescape(g:y2r_config[s:item])]
        endfor
        let s:ret = system(call(function('printf'), s:params))
        echo 'paste to remote'
    endfunction
    nnoremap <silent> <unique> <Leader>y :call Yank2Remote()<CR>
endif

"-----------------------------------------------------------------------------
" vimpager
let g:vimpager_passthrough = 1

if exists("vimpager")
    if exists("vimpager_ptree") && vimpager_ptree[-2] == 'wman'
        set ft=man
    endif
endif

" vim:ft=vim et:
