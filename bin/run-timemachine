#!/usr/bin/env perl
use 5.14.0;
use warnings;
use File::Basename;
use File::Temp;
use JSON::PP;
use Time::Piece;

sub with_timestamp($) {
    (my $str = shift) =~ s/^/(localtime->datetime) . "\t"/egm;
    return $str;
}

sub logger($) {
    say with_timestamp shift;
}

sub safe_system($) {
    my $cmd = shift;

    my $stderr_file = File::Temp->new->filename;
    chomp(my $stdout = `$cmd 2> $stderr_file`);
    my $stderr = do {
        open my $fh, '<', $stderr_file or die;
        local $/;
        <$fh>;
    };
    die with_timestamp "failed to execute: $cmd\n$stderr" if $? != 0 || $stderr;
    return $stdout;
}

my $json = safe_system "$ENV{HOME}/git/dotfiles/bin/tmstatus";
my $status = do { decode_json($json) };
die with_timestamp $@ if $@;

if ($status->{running} || $status->{stopping}) {
    # Starting
    # MountingBackupVol
    # ThinningPreBackup
    # Copying
    # LazyThinning
    logger 'Timemachine is running: ' . $status->{backupPhase};
    my $p = $status->{progress};
    my @out;
    push @out,
        sprintf '%s / %s', $p->{bytesFormatted}, $p->{totalBytesFormatted}
            if exists $p->{bytesFormatted} && exists $p->{totalBytesFormatted};
    push @out, 'EST ' . $p->{timeRemainingFormatted}
        if exists $p->{timeRemainingFormatted};
    logger join ' ', @out if @out;
    exit;
} elsif ($status->{backupPhase}) {
    logger 'status => ' . $status->{backupPhase};
}

my $latest_backup = eval { safe_system '/usr/bin/tmutil latestbackup' };
if ($_ = $@) {
    exit if /Unable to locate machine directory for host\./;
    die $@;
}
my $t = Time::Piece->strptime(basename($latest_backup), '%F-%H%M%S');
if ((time - $t->epoch) < 12 * 60 * 60) {
    exit;
}

logger 'The latest backup: ' . $t->datetime;
logger 'starting backup...';
safe_system '/usr/bin/tmutil startbackup --auto';
logger 'finished!';
