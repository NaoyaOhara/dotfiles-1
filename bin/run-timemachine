#!/usr/local/bin/perl
use 5.34.0;
use warnings;
use feature 'try';
no warnings 'experimental::try';
use File::Basename;
use File::Temp;
use JSON::PP;
use Time::Piece;

sub with_timestamp($) {
    (my $str = shift) =~ s/^/(localtime->datetime) . "\t"/egm;
    return $str;
}

sub logger($) {
    say with_timestamp shift;
}

sub load($) {
    my $file = shift;
    if (-f $file) {
        open my $fh, '<', $file
            or die with_timestamp "failed to load $file: $!";
        local $/;
        return <$fh>;
    }
}

sub save($$) {
    my ($file, $content) = @_;
    open my $fh, '>', $file or die;
    $fh->print($content);
}

sub safe_system($) {
    my $cmd = shift;

    my $stderr_file = File::Temp->new->filename;
    chomp(my $stdout = `$cmd 2> $stderr_file`);
    my $stderr = load $stderr_file;
    die with_timestamp "failed to execute: $cmd\n$stderr" if $? != 0 || $stderr;
    return $stdout;
}

sub get($$;$) {
    my ($hash, $key, $default) = @_;
    exists $hash->{$key} ? $hash->{$key} : $default;
}

sub show_status($) {
    my $status = shift;

    if (get($status, 'running') || get($status, 'stopping')) {
        # Starting
        # MountingBackupVol
        # ThinningPreBackup
        # Copying
        # LazyThinning
        # ThinningPostBackup
        logger sprintf 'Status: %s from %s',
            get($status, 'backupPhase', 'Unknown'),
            get($status, 'dateOfStateChangeFormatted', 'Unknown');
        my $p = get $status, 'progress', +{};
        logger sprintf '%s / %s EST %s',
            get($p, 'bytesFormatted', 0),
            get($p, 'totalBytesFormatted', 0),
            get($p, 'timeRemainingFormatted', 'Unknown');
        return 0;
    } elsif (defined(my $phase = get $status, 'backupPhase')) {
        logger "status => $phase";
    }
    undef;
}

sub detect_latest_backup() {
    my $t = do {
        try { safe_system '/usr/bin/tmutil latestbackup' } catch ($e) {
            if ($e =~ /Unable to locate machine directory for host\./) {
                return 2;
            } elsif ($e =~ /Unable to locate latest snapshot for host\./) {
                return undef;
            }
            die with_timestamp $e;
        }
    };
    my $name = basename $t;
    my $in_progress_re = qr/\.inProgress$/;
    my $is_in_progress = $name =~ $in_progress_re;
    (my $canonical = $name) =~ s/$in_progress_re//;
    my $no_tz = Time::Piece->strptime($canonical, '%F-%H%M%S');
    my $latest = localtime($no_tz->epoch - 9 * 60 * 60);
    undef, $latest, $is_in_progress;
}

sub process() {
    my ($exit_code, $latest, $is_in_progress) = detect_latest_backup;
    if (defined $exit_code) {
        if ($exit_code == 2) {
            logger 'Unable to find the drive.';
        }
        return $exit_code;
    }

    if (defined $latest) {
        my $dt = $latest->datetime;
        my $file = '/tmp/run-timemachine-latest';
        my $saved = load $file;
        if (!defined $saved || $dt ne $saved) {
            my $indicator = $is_in_progress ? ' (inProgress)' : '';
            logger sprintf 'The latest backup: %s%s', $dt, $indicator;
            save $file, $dt;
        }
    }

    my $json = safe_system "$ENV{HOME}/git/dotfiles/bin/tmstatus";
    my $status = do {
        try { decode_json($json) } catch ($e) { die with_timestamp $e }
    };

    if (defined(my $exit_code = show_status $status)) {
        return $exit_code;
    }

    if (defined $latest) {
        my $now = localtime;
        my $delta_hour = ($now->epoch - $latest->epoch) / 60 / 60;
        my $is_night = $now->hour >= 2 && $now->hour <= 6;
        if ($delta_hour > 12 && $is_night || $delta_hour > 24) {
            logger 'starting backup...';
            safe_system '/usr/bin/tmutil startbackup --auto';
            logger 'done!';
        }
    }
    return 0;
}

exit process if $0 eq __FILE__;
