#!/usr/bin/env perl
use 5.14.0;
use warnings;
use File::Basename;
use File::Temp;
use JSON::PP;
use Time::Piece;

sub with_timestamp($) {
    (my $str = shift) =~ s/^/(localtime->datetime) . "\t"/egm;
    return $str;
}

sub logger($) {
    say with_timestamp shift;
}

sub load($) {
    my $file = shift;
    if (-f $file) {
        open my $fh, '<', $file or die;
        local $/;
        return <$fh>;
    }
    '';
}

sub save($$) {
    my ($file, $content) = @_;
    open my $fh, '>', $file or die;
    $fh->print($content);
}

sub safe_system($) {
    my $cmd = shift;

    my $stderr_file = File::Temp->new->filename;
    chomp(my $stdout = `$cmd 2> $stderr_file`);
    my $stderr = load $stderr_file;
    die with_timestamp "failed to execute: $cmd\n$stderr" if $? != 0 || $stderr;
    return $stdout;
}

sub get($$;$) {
    my ($hash, $key, $default) = @_;
    exists $hash->{$key} ? $hash->{$key} : $default;
}

my $json = safe_system "$ENV{HOME}/git/dotfiles/bin/tmstatus";
my $status = do { decode_json($json) };
die with_timestamp $@ if $@;

if (get($status, 'running') || get($status, 'stopping')) {
    # Starting
    # MountingBackupVol
    # ThinningPreBackup
    # Copying
    # LazyThinning
    logger 'Timemachine is running: ' . get $status, 'backupPhase', 'Unknown';
    my $p = get $status, 'progress', +{};
    logger sprintf '%s / %s EST %s',
        get($p, 'bytesFormatted', 0),
        get($p, 'totalBytesFormatted', 0),
        get($p, 'timeRemainingFormatted', 'Unknown');
    exit;
} elsif (defined(my $phase = get $status, 'backupPhase')) {
    logger "status => $phase";
}

my $latest_backup = eval { safe_system '/usr/bin/tmutil latestbackup' };
if ($_ = $@) {
    exit if /Unable to locate machine directory for host\./;
    die;
}
my $t = Time::Piece->strptime(basename($latest_backup), '%F-%H%M%S');
if ((time - $t->epoch) < 12 * 60 * 60) {
    exit;
}

my $dt = $t->datetime;
my $file = '/tmp/run-timemachine-latest';
my $latest = load $file;
exit if $dt eq $latest;

logger "The latest backup: $dt";
logger 'starting backup...';
safe_system '/usr/bin/tmutil startbackup --auto';
logger 'done!';
save $file, $dt;
