#!/usr/bin/env ruby
require 'optparse'
require 'pathname'

class String
  def red;  STDOUT.isatty ? "\033[31m#{self}\033[0m" : self end
  def cyan; STDOUT.isatty ? "\033[36m#{self}\033[0m" : self end
end

module FSSH

  def system(cmd)
    if ENV['LC_FSSH_PORT'].nil?
      Kernel.system cmd
    else
      Kernel.system "ssh -p #{ENV['LC_FSSH_PORT']} -l #{ENV['LC_FSSH_USER']} #{ENV['LC_FSSH_COPY_ARGS']} localhost exec #{cmd}"
    end
  end

  module_function :system
end

class GithubUrl

  def initialize
    @url = case `git remote -v`.split("\n")[0].split("\t")[1].split(' ')[0]
           when %r[\A(?:ssh://)?git@([\w.-]+):(.*)\z]
             "https://#$1/#$2"
           when %r[\Agit://git@(.*)\z]
             "https://#$1"
           when %r[\A(https://.*)(?:\.git)?\z]
             $1
           else
             raise 'can not detect repository url'.red
           end
  end

  def open
    puts "opening url: #@url".cyan
    FSSH::system "open #@url"
  end

  def +(other)
    @url += '/' unless @url =~ %r[/\z] || other.to_s =~ %r[\A/]
    @url += other.to_s
    self
  end

  def line_hash(from:, to:)
    raise '`to` option must be specified with `from`' if from == 0 && to > 0
    return self if from == 0 && to == 0
    @url += "#L#{from}" + if to == 0
                            ''
                          else
                            "-#{to}"
                          end
    self
  end
end

class OpenTarget

  attr_reader :path

  def initialize(str)
    return if str.nil?

    @path = Pathname(str)
    raise 'you must specify the absolute path' if @path.relative?
    @git_top_dir = Pathname(`git rev-parse --show-toplevel`.chomp)
    @path = @path.relative_path_from @git_top_dir
  end

  def to_s
    @path.to_s
  end

  def nil?
    @path.nil?
  end
end

class OpenGithubLink

  def initialize
    params = ARGV.getopts('', 'from:0', 'to:0', 'branch:master')
    from   = params['from'].to_i
    to     = params['to'].to_i
    branch = params['branch']
    target = OpenTarget.new ARGV[0]
    github_url = GithubUrl.new
    if target.nil?
      github_url.open
    else
      (github_url + "blob/#{branch}" + target).line_hash(from: from, to: to).open
    end
  end
end

OpenGithubLink.new
